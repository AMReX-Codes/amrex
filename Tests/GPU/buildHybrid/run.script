#!/bin/bash
#BSUB -P CSC308
#BSUB -W 2
#BSUB -nnodes 1
#BSUB -J MMtest 
#BSUB -o MMtest.%J
#BSUB -e MMtest.%J

omp=1
EXE="./link.app.pgi"
#EXE="../main3d.pgi.CUDA.ex"
JSRUN="jsrun -n 1 -a 1 -g 1 -c 1 --bind=packed:${omp}"
#INPUTS=inputs_geometry

#rundir="${LSB_JOBNAME}-${LSB_JOBID}"
#mkdir $rundir
#cp $0 $rundir
#cp ${INPUTS} $rundir
#cd $rundir

# 1. Run normally
${JSRUN} ${EXE} >& out.${LSB_JOBID}

# 2. Run under nvprof and direct all stdout and stderr to nvprof.txt
#${JSRUN} nvprof ${EXE} ${INPUTS} &> nvprof.txt
#${JSRUN} nvprof --profile-child-processes ${EXE} inputs &> nvprof.txt

# 3. Run under nvprof and store performance data in a nvvp file
# Can be converted to text using nvprof -i nvprof-timeline-%p.nvvp
#${JSRUN} nvprof --profile-child-processes -o nvprof-timeline-%p.nvvp ${EXE} ${INPUTS} 

# COLLECT PERFORMANCE METRICS - THIS IS MUCH SLOWER. Set nsteps=2 in the inputs files
# 4. Run under nvprof and collect metrics for a subset of kernels
#${JSRUN} nvprof --profile-child-processes --kernels '(deposit_current|gather_\w+_field|push_\w+_boris)' --analysis-metrics -o nvprof-metrics-kernel-%p.nvvp ${EXE} ${INPUTS} 

# 5. Run under nvprof and collect metrics for all kernels -- much slower!
#${JSRUN} nvprof --profile-child-processes --analysis-metrics -o nvprof-metrics-%p.nvvp ${EXE} ${INPUTS}
