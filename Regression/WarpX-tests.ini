# This file is used both for the nightly regression tests
# on the battra server, and for the CI tests on Travis CI
# In the case of Travis CI, some of the parameters entered
# below are overwritten, see prepare_file_travis.py
[main]
testTopDir     = /home/regtester/AMReX_RegTesting/rt-WarpX/
webTopDir      = /home/regtester/AMReX_RegTesting/rt-WarpX/web

sourceTree = C_Src

# suiteName is the name prepended to all output directories
suiteName = WarpX

COMP = g++
FCOMP = gfortran
add_to_c_make_command = TEST=TRUE USE_ASSERTION=TRUE WarpxBinDir=

purge_output = 1

MAKE = make
numMakeJobs = 8

# MPIcommand should use the placeholders:
#   @host@ to indicate where to put the hostname to run on
#   @nprocs@ to indicate where to put the number of processors
#   @command@ to indicate where to put the command to run
#
# only tests with useMPI = 1 will run in parallel
# nprocs is problem dependent and specified in the individual problem
# sections.

#MPIcommand = mpiexec -host @host@ -n @nprocs@ @command@
MPIcommand = mpiexec -n @nprocs@ @command@
MPIhost =

reportActiveTestsOnly = 1

# Add "GO UP" link at the top of the web page?
goUpLink = 1

# email
sendEmailWhenFail = 1
emailTo = weiqunzhang@lbl.gov, jlvay@lbl.gov, rlehe@lbl.gov, atmyers@lbl.gov, mthevenet@lbl.gov, jaehongpark@lbl.gov, oshapoval@lbl.gov, henri.vincenti@cea.fr, ldianaamorim@lbl.gov, rjambunathan@lbl.gov
emailBody = Check https://ccse.lbl.gov/pub/RegressionTesting/WarpX/ for more details.

[AMReX]
dir = /home/regtester/AMReX_RegTesting/amrex/
branch = development

[source]
dir = /home/regtester/AMReX_RegTesting/warpx
branch = dev

[extra-PICSAR]
dir = /home/regtester/AMReX_RegTesting/picsar/
branch = master

# individual problems follow

[RigidInjection_lab]
buildDir = .
inputFile = Examples/Modules/RigidInjection/inputs.LabFrame
dim = 2
addToCompileString =
restartTest = 0
useMPI = 1
numprocs = 2
useOMP = 1
numthreads = 2
compileTest = 0
doVis = 0
compareParticles = 0
analysisRoutine = Examples/Modules/RigidInjection/analysis_rigid_injection_LabFrame.py

[RigidInjection_boost_backtransformed]
buildDir = .
inputFile = Examples/Modules/RigidInjection/inputs.BoostedFrame
dim = 2
addToCompileString =
restartTest = 0
useMPI = 1
numprocs = 2
useOMP = 1
numthreads = 2
compileTest = 0
doVis = 0
compareParticles = 0
outputFile = "lab_frame_data"
selfTest = 1
aux1File = Tools/read_raw_data.py
analysisRoutine = Examples/Modules/RigidInjection/analysis_rigid_injection_BoostedFrame.py
