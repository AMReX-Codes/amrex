EBASE     ?= Nyx_hydro

USE_PARTICLES = TRUE

ifeq ($(USE_HPGMG), TRUE)
   HPGMG_F_CYCLES = 20
   HPGMG_V_CYCLES = 0
   HPGMG_HELMHOLTZ = FALSE
   HPGMG_STENCIL_VARIABLE_COEFFICIENT = FALSE
   HPGMG_USE_SUBCOMM = TRUE
   HPGMG_BOTTOM_SOLVER= CG
   HPGMG_SMOOTHER = GSRB
endif

include $(AMREX_HOME)/Tools/GNUMake/Make.defs
include $(AMREX_HOME)/Src/AmrTask/rts_impls/mpi_pthreads/Make.package
vpathdir += $(AMREX_HOME)/Src/AmrTask/rts_impls/mpi_pthreads

NYX           = TRUE

# Nyx now uses a coarse grained OMP approach
DEFINES += -DCRSEGRNDOMP

ifeq ($(USE_SINGLE_PRECISION_PARTICLES), TRUE)
  DEFINES += -DBL_SINGLE_PRECISION_PARTICLES
endif

HENSON_INCLUDE_DIR ?= $(HOME)/Research/Sensei/henson-chai/include
HENSON_LIBRARY_DIR ?= $(HOME)/Build/Sensei/henson-chai
HENSON_LIBRARY ?= -L$(HENSON_LIBRARY_DIR) -lhenson
HENSON_LIBPMPI ?= -L$(HENSON_LIBRARY_DIR) -lhenson-pmpi -Wl,-rpath $(HENSON_LIBRARY_DIR)
ifeq ($(USE_HENSON), TRUE)
  DEFINES += -DHENSON
  FFLAGS += -fPIC
  F90FLAGS += -fPIC
  CXXFLAGS += -fPIC
  CFLAGS += -fPIC
  LDFLAGS += -shared -Wl,--export-dynamic -Wl,-u,henson_set_contexts,-u,henson_set_namemap
  INCLUDE_LOCATIONS += $(HENSON_INCLUDE_DIR)
  LIBRARIES += $(HENSON_LIBRARY) $(HENSON_LIBPMPI)
endif

ifeq ($(USE_GRAV), TRUE)
  DEFINES += -DGRAVITY
endif

ifeq ($(NO_HYDRO), TRUE)
  DEFINES += -DNO_HYDRO
endif

ifeq ($(USE_AGN), TRUE)
  DEFINES += -DAGN
endif

ifeq ($(NEUTRINO_PARTICLES), TRUE)
  DEFINES += -DNEUTRINO_PARTICLES
endif

ifeq ($(USE_HEATCOOL), TRUE)
  DEFINES += -DHEATCOOL
endif

ifeq ($(USE_SDC), TRUE)
  DEFINES += -DSDC
endif

ifeq ($(USE_FORCING), TRUE)
  DEFINES += -DFORCING
endif

DEFINES += -DBL_NOLINEVALUES

GIMLET_DIR ?= /home/vince/Development/gimlet
# Gimlet needs FFTW MPI.
FFTW_INC ?= /usr/include
FFTW_DIR ?= /usr/lib/x86_64-linux-gnu

REEBER_HOME ?= /project/projectdirs/nyx/ghweber/reeber2
# Reeber needs Boost (both headers and libraries) and diy2.
BOOST_INCLUDE_DIR ?= /project/projectdirs/nyx/ghweber/boost-1.61.0-noarch/include
DIY_INCLUDE_DIR ?= /project/projectdirs/nyx/ghweber/diy/include

ifeq ($(REEBER), TRUE)
  DEFINES += -DREEBER
  DEFINES += -DREEBER_USE_BOXLIB_READER -DREEBER_IN_SITU
  DEFINES += -DPARALLEL_MPI -DBOOST_DATE_TIME_NO_LOCALE
  INCLUDE_LOCATIONS += $(BOOST_INCLUDE_DIR)
  INCLUDE_LOCATIONS += $(DIY_INCLUDE_DIR)
  INCLUDE_LOCATIONS += $(REEBER_HOME)/include $(REEBER_HOME)/examples/include $(REEBER_HOME)/examples/local-global
  VPATH_LOCATIONS += $(REEBER_HOME)/src $(REEBER_HOME)/examples/local-global
  LIBRARIES += -lpthread
endif
ifeq ($(DEBUG), TRUE)
  DEFINES += -DDEBUG
endif

ifeq ($(GIMLET), TRUE)

  ifneq ($(USE_OMP), TRUE)
    $(error Gimlet requires compiling with OpenMP)
  endif

  ifneq ($(USE_MPI), TRUE)
    $(error Gimlet requires compiling with MPI)
  endif

  DEFINES += -DGIMLET
  INCLUDE_LOCATIONS += $(GIMLET_DIR)
  VPATH_LOCATIONS += $(GIMLET_DIR)
  INCLUDE_LOCATIONS += $(FFTW_INC)
  LIBRARIES += -L$(FFTW_DIR) -lfftw3_mpi -lfftw3_omp -lfftw3

endif

#These are the directories in Nyx 

Bdirs 	:= Source Source/Src_3d Source/HydroFortran Source/Tagging Source/Initialization
Bdirs 	+= Source/EOS Source/Network Source/HeatCool
Bdirs 	+= Source/SourceTerms Source/DerivedQuantities
ifeq ($(USE_MPI), TRUE)
Bdirs 	+= Source/Monitors
endif

ifeq ($(USE_GRAV), TRUE)
   Bdirs 	+= Source/Gravity
endif
ifeq ($(USE_FORCING), TRUE)
   Bdirs 	+= Source/Forcing
endif
ifeq ($(USE_AGN), TRUE)
   Bdirs 	+= Source/AGN
endif

Bpack	+= $(foreach dir, $(Bdirs), $(TOP)/$(dir)/Make.package)
Blocs	+= $(foreach dir, $(Bdirs), $(TOP)/$(dir))

include $(Bpack)
INCLUDE_LOCATIONS += $(Blocs)
VPATH_LOCATIONS   += $(Blocs)

#These are the directories in AMReX

Pdirs   := Base AmrCore Amr Boundary Particle Extern/amrdata 
Ppack	+= $(foreach dir, $(Pdirs), $(AMREX_HOME)/Src/$(dir)/Make.package)
Plocs	+= $(foreach dir, $(Pdirs), $(AMREX_HOME)/Src/$(dir))

include $(Ppack)
INCLUDE_LOCATIONS += $(Plocs)
VPATH_LOCATIONS   += $(Plocs)

include $(TOP)/Source/Constants/Make.package
INCLUDE_LOCATIONS += $(TOP)/Source/Constants
VPATH_LOCATIONS   += $(TOP)/Source/Constants

USE_MG = FALSE
ifeq ($(USE_GRAV), TRUE)
  USE_MG = TRUE
endif

ifeq ($(USE_MG), TRUE)
  include $(AMREX_HOME)/Src/LinearSolvers/C_CellMG/Make.package
  INCLUDE_LOCATIONS += $(AMREX_HOME)/Src/LinearSolvers/C_CellMG
  VPATH_LOCATIONS   += $(AMREX_HOME)/Src/LinearSolvers/C_CellMG

  include $(AMREX_HOME)/Src/LinearSolvers/MLMG/Make.package
  INCLUDE_LOCATIONS += $(AMREX_HOME)/Src/LinearSolvers/MLMG
  VPATH_LOCATIONS   += $(AMREX_HOME)/Src/LinearSolvers/MLMG
endif

include $(AMREX_HOME)/Src/F_BaseLib/FParallelMG.mak
INCLUDE_LOCATIONS += $(AMREX_HOME)/Src/F_BaseLib
VPATH_LOCATIONS   += $(AMREX_HOME)/Src/F_BaseLib

VODE_dir    := $(TOP)/Util/VODE
include $(VODE_dir)/Make.package

BLAS_dir    := $(TOP)/Util/BLAS
include $(BLAS_dir)/Make.package

INCLUDE_LOCATIONS += $(VODE_dir)
INCLUDE_LOCATIONS += $(BLAS_dir)

VPATH_LOCATIONS   += $(VODE_dir)
VPATH_LOCATIONS   += $(BLAS_dir)

all: $(executable) 
	$(SILENT) $(RM) AMReX_buildInfo.cpp
	@echo SUCCESS

# job_info support
CEXE_sources += AMReX_buildInfo.cpp
CEXE_headers += $(AMREX_HOME)/Tools/C_scripts/AMReX_buildInfo.H
INCLUDE_LOCATIONS +=  $(AMREX_HOME)/Tools/C_scripts

AMReX_buildInfo.cpp: 
	$(AMREX_HOME)/Tools/C_scripts/makebuildinfo_C.py \
          --amrex_home "$(AMREX_HOME)" \
          --COMP "$(COMP)" --COMP_VERSION "$(COMP_VERSION)" \
          --CXX_comp_name "$(CXX)" --CXX_flags "$(CXXFLAGS) $(CPPFLAGS) $(includes)" \
          --F_comp_name "$(F90)" --F_flags "$(F90FLAGS)" \
          --link_flags "$(LDFLAGS)" --libraries "$(libraries)" \
          --GIT "$(TOP) $(AMREX_HOME)"

vpath %.c   . $(VPATH_LOCATIONS)
vpath %.cpp . $(VPATH_LOCATIONS)
vpath %.h   . $(VPATH_LOCATIONS)
vpath %.H   . $(VPATH_LOCATIONS)
vpath %.F   . $(VPATH_LOCATIONS)
vpath %.f90 . $(VPATH_LOCATIONS)
vpath %.f   . $(VPATH_LOCATIONS)
vpath %.fi  . $(VPATH_LOCATIONS)

include $(AMREX_HOME)/Tools/GNUMake/Make.rules

clean::
	$(SILENT) $(RM) AMReX_buildInfo.cpp

