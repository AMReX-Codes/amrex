#ifndef AMREX_PARTICLETILE_H_
#define AMREX_PARTICLETILE_H_
#include <AMReX_Config.H>

#include <AMReX_Extension.H>
#include <AMReX_Particle.H>
#include <AMReX_ArrayOfStructs.H>
#include <AMReX_StructOfArrays.H>
#include <AMReX_Vector.H>
#include <AMReX_REAL.H>
#include <AMReX_RealVect.H>

#include <array>

namespace amrex {

// Forward Declaration
template <int NArrayReal, int NArrayInt>
struct SoAParticle;
 
template <typename T_ParticleType, int NArrayReal, int NArrayInt>
struct ParticleTileData 
{

    static constexpr int NAR = NArrayReal;
    static constexpr int NAI = NArrayInt;

    using ParticleType = T_ParticleType;
    using Self = ParticleTileData<ParticleType, NAR, NAI>;

    static constexpr int NStructReal = ParticleType::NReal;
    static constexpr int NStructInt = ParticleType::NInt;

    using SuperParticleType = Particle<NStructReal+NAR, NStructInt+NAI>;

    static_assert(!std::is_same<ParticleType, SoAParticle<3,4>>::value || NAR != 0, "ParticleTileData NAR==0");

    Long m_size;

    ParticleType* AMREX_RESTRICT m_aos;
    
    GpuArray<ParticleReal* , NAR> m_rdata;
    GpuArray<int* , NAI> m_idata;

    int m_num_runtime_real;
    int m_num_runtime_int;
    ParticleReal* AMREX_RESTRICT * AMREX_RESTRICT m_runtime_rdata;
    int* AMREX_RESTRICT * AMREX_RESTRICT m_runtime_idata;

    AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
    void packParticleData (char* buffer, int src_index, std::size_t dst_offset,
                           const int* comm_real, const int * comm_int) const noexcept
    {
        AMREX_ASSERT(src_index < m_size);
        auto dst = buffer + dst_offset;
        memcpy(dst, m_aos + src_index, sizeof(ParticleType));
        dst += sizeof(ParticleType);
        int array_start_index  = AMREX_SPACEDIM + NStructReal;
        for (int i = 0; i < NAR; ++i)
        {
            if (comm_real[array_start_index + i])
            {
                memcpy(dst, m_rdata[i] + src_index, sizeof(ParticleReal));
                dst += sizeof(ParticleReal);
            }
        }
        int runtime_start_index  = AMREX_SPACEDIM + NStructReal + NAR;
        for (int i = 0; i < m_num_runtime_real; ++i)
        {
            if (comm_real[runtime_start_index + i])
            {
                memcpy(dst, m_runtime_rdata[i] + src_index, sizeof(ParticleReal));
                dst += sizeof(ParticleReal);
            }
        }
        array_start_index  = 2 + NStructInt;
        for (int i = 0; i < NAI; ++i)
        {
            if (comm_int[array_start_index + i])
            {
                memcpy(dst, m_idata[i] + src_index, sizeof(int));
                dst += sizeof(int);
            }
        }
        runtime_start_index  = 2 + NStructInt + NAI;
        for (int i = 0; i < m_num_runtime_int; ++i)
        {
            if (comm_int[runtime_start_index + i])
            {
                memcpy(dst, m_runtime_idata[i] + src_index, sizeof(int));
                dst += sizeof(int);
            }
        }
    }

    AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
    void unpackParticleData (const char* buffer, Long src_offset, int dst_index,
                             const int* comm_real, const int* comm_int) const noexcept
    {
        AMREX_ASSERT(dst_index < m_size);
        auto src = buffer + src_offset;
        memcpy(m_aos + dst_index, src, sizeof(ParticleType));
        src += sizeof(ParticleType);
        int array_start_index  = AMREX_SPACEDIM + NStructReal;
        for (int i = 0; i < NAR; ++i)
        {
            if (comm_real[array_start_index + i])
            {
                memcpy(m_rdata[i] + dst_index, src, sizeof(ParticleReal));
                src += sizeof(ParticleReal);
            }
        }
        int runtime_start_index  = AMREX_SPACEDIM + NStructReal + NAR;
        for (int i = 0; i < m_num_runtime_real; ++i)
        {
            if (comm_real[runtime_start_index + i])
            {
                memcpy(m_runtime_rdata[i] + dst_index, src, sizeof(ParticleReal));
                src += sizeof(ParticleReal);
            }
        }
        array_start_index  = 2 + NStructInt;
        for (int i = 0; i < NAI; ++i)
        {
            if (comm_int[array_start_index + i])
            {
                memcpy(m_idata[i] + dst_index, src, sizeof(int));
                src += sizeof(int);
            }
        }
        runtime_start_index  = 2 + NStructInt + NAI;
        for (int i = 0; i < m_num_runtime_int; ++i)
        {
            if (comm_int[runtime_start_index + i])
            {
                memcpy(m_runtime_idata[i] + dst_index, src, sizeof(int));
                src += sizeof(int);
            }
        }
    }

    template <typename T = ParticleType, typename std::enable_if<!T::is_soa_particle, int>::type = 0>
    AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
    SuperParticleType getSuperParticle (int index) const noexcept
    {
        AMREX_ASSERT(index < m_size);
        SuperParticleType sp;
        for (int i = 0; i < AMREX_SPACEDIM; ++i)
            sp.pos(i) = m_aos[index].pos(i);
        for (int i = 0; i < NStructReal; ++i)
            sp.rdata(i) = m_aos[index].rdata(i);
        for (int i = 0; i < NAR; ++i)
            sp.rdata(NStructReal+i) = m_rdata[i][index];
        sp.id() = m_aos[index].id();
        sp.cpu() = m_aos[index].cpu();
        for (int i = 0; i < NStructInt; ++i)
            sp.idata(i) = m_aos[index].idata(i);
        for (int i = 0; i < NAI; ++i)
            sp.idata(NStructInt+i) = m_idata[i][index];
        return sp;
    }

    template <typename T = ParticleType, typename std::enable_if<T::is_soa_particle, int>::type = 0>
    AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
    SuperParticleType getSuperParticle (int index) const noexcept
    {
        AMREX_ASSERT(index < m_size);
        SuperParticleType sp;
        for (int i = 0; i < AMREX_SPACEDIM; ++i)
            sp.pos(i) = m_rdata[i][index];
        for (int i = 0; i < NStructReal; ++i)
            sp.rdata(i) = m_rdata[i][index];
        for (int i = 0; i < NAR; ++i)
            sp.rdata(NStructReal+i) = m_rdata[i][index];
        sp.id() = m_idata[0][index];
        sp.cpu() = m_idata[1][index];
        for (int i = 0; i < NStructInt; ++i)
            sp.idata(i) = m_idata[i][index];
        for (int i = 0; i < NAI; ++i)
            sp.idata(NStructInt+i) = m_idata[i][index];
        return sp;
    }

    AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
    void setSuperParticle (const SuperParticleType& sp, int index) const noexcept
    {
        for (int i = 0; i < AMREX_SPACEDIM; ++i)
            m_aos[index].pos(i) = sp.pos(i);
        for (int i = 0; i < NStructReal; ++i)
            m_aos[index].rdata(i) = sp.rdata(i);
        for (int i = 0; i < NAR; ++i)
            m_rdata[i][index] = sp.rdata(NStructReal+i);
        m_aos[index].id() = sp.id();
        m_aos[index].cpu() = sp.cpu();
        for (int i = 0; i < NStructInt; ++i)
            m_aos[index].idata(i) = sp.idata(i);
        for (int i = 0; i < NAI; ++i)
            m_idata[i][index] = sp.idata(NStructInt+i);
    }
};

// SOA Particle Structure 
template <int T_NArrayReal, int T_NArrayInt>
struct SoAParticle : SoAParticleBase
{
    static constexpr int NArrayReal = T_NArrayReal;
    static constexpr int NArrayInt = T_NArrayInt;
    using StorageParticleType = SoAParticleBase;
    using PTD = ParticleTileData<SoAParticleBase, NArrayReal, NArrayInt>;
    static constexpr bool is_soa_particle = true;

    using RealType = ParticleReal;

    static Long the_next_id;

  SoAParticle (PTD ptd, int const index) 
    {
        m_particle_tile_data=ptd;
        m_index=index;
    }

     
    //functions to get id and cpu in the SOA data

    AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
    ParticleCPUWrapper cpu () & { 
        uint64_t unsigned_cpu_value;
        unsigned_cpu_value = (uint64_t) this->m_particle_tile_data.m_idata[1][m_index];
        return ParticleCPUWrapper(unsigned_cpu_value); }

    AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
    ParticleIDWrapper id () & { 
        uint64_t unsigned_id_value;
        unsigned_id_value = (uint64_t) this->m_particle_tile_data.m_idata[0][m_index];
        return ParticleIDWrapper(unsigned_id_value); }

    AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
    ConstParticleCPUWrapper cpu () const & { 
        uint64_t unsigned_cpu_value;
        unsigned_cpu_value = (uint64_t) this->m_particle_tile_data.m_idata[1][m_index];
        return ConstParticleCPUWrapper(unsigned_cpu_value); }

    AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
    ConstParticleIDWrapper id () const & { 
        uint64_t unsigned_id_value;
        unsigned_id_value = (uint64_t) this->m_particle_tile_data.m_idata[0][m_index];
        return ConstParticleIDWrapper(unsigned_id_value); }

    //functions to get positions of the particle in the SOA data

    AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
    RealVect pos () const & {return RealVect(AMREX_D_DECL(this->m_particle_tile_data->m_rdata[0][m_index], this->m_particle_tile_data.m_rdata[1][m_index], this->m_particle_tile_data->m_rdata[2][m_index]));}

    AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
    RealType& pos (int position_index) &
    {
        AMREX_ASSERT(position_index < AMREX_SPACEDIM);
        return this->m_particle_tile_data.m_rdata[position_index][m_index];
    }

    AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
    RealType  pos (int position_index) const &
    {
        AMREX_ASSERT(position_index < AMREX_SPACEDIM);
        return this->m_particle_tile_data.m_rdata[position_index][m_index];
    }

    static Long NextID ();

    /**
    * \brief This version can only be used inside omp critical.
    */
    static Long UnprotectedNextID ();

    /**
    * \brief Reset on restart.
    *
    * \param nextid
    */
    static void NextID (Long nextid);

    private :

    static_assert(std::is_trivially_copyable<ParticleTileData<SoAParticleBase, NArrayReal, NArrayInt>>(), "ParticleTileData is not trivially copyable");

    PTD m_particle_tile_data;
    int m_index;
};

template <int NArrayReal, int NArrayInt> Long SoAParticle<NArrayReal, NArrayInt>::the_next_id = 1;

template <int NArrayReal, int NArrayInt>
Long
SoAParticle<NArrayReal, NArrayInt>::NextID ()
{
    Long next;
// we should be able to test on _OPENMP < 201107 for capture (version 3.1)
// but we must work around a bug in gcc < 4.9
#if defined(AMREX_USE_OMP) && defined(_OPENMP) && _OPENMP < 201307
#pragma omp critical (amrex_particle_nextid)
#elif defined(AMREX_USE_OMP)
#pragma omp atomic capture
#endif
    next = the_next_id++;

    if (next > LastParticleID)
        amrex::Abort("SoAParticle<NArrayReal, NArrayInt>::NextID() -- too many particles");

    return next;
}

template <int NArrayReal, int NArrayInt>
Long
SoAParticle<NArrayReal, NArrayInt>::UnprotectedNextID ()
{
    Long next = the_next_id++;
    if (next > LastParticleID)
        amrex::Abort("SoAParticle<NArrayReal, NArrayInt>::NextID() -- too many particles");
    return next;
}

template <int NArrayReal, int NArrayInt>
void
SoAParticle<NArrayReal, NArrayInt>::NextID (Long nextid)
{
    the_next_id = nextid;
}

template <typename T_ParticleType, int NArrayReal, int NArrayInt>
struct ConstParticleTileData
{
    static constexpr int NAR = NArrayReal;
    static constexpr int NAI = NArrayInt;
    using ParticleType = T_ParticleType;

    static constexpr int NStructReal = ParticleType::NReal;
    static constexpr int NStructInt = ParticleType::NInt;

    using SuperParticleType = Particle<NStructReal+NArrayReal, NStructInt+NArrayInt>;

    Long m_size;
    const ParticleType* AMREX_RESTRICT m_aos;

    GpuArray<const ParticleReal* AMREX_RESTRICT, NArrayReal> m_rdata;
    GpuArray<const int* AMREX_RESTRICT, NArrayInt > m_idata;

    auto const* rdata(const int attribute_index) const
    {
        return this->m_rdata[attribute_index];
    }

    auto const* idata(const int attribute_index) const
    {
        return this->m_idata[attribute_index];
    }

    int m_num_runtime_real;
    int m_num_runtime_int;
    const ParticleReal* AMREX_RESTRICT * AMREX_RESTRICT m_runtime_rdata;
    const int* AMREX_RESTRICT * AMREX_RESTRICT m_runtime_idata;

    AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
    void packParticleData(char* buffer, int src_index, Long dst_offset,
                          const int* comm_real, const int * comm_int) const noexcept
    {
        AMREX_ASSERT(src_index < m_size);
        auto dst = buffer + dst_offset;
        memcpy(dst, m_aos + src_index, sizeof(ParticleType));
        dst += sizeof(ParticleType);
        int array_start_index  = AMREX_SPACEDIM + NStructReal;
        for (int i = 0; i < NArrayReal; ++i)
        {
            if (comm_real[array_start_index + i])
            {
                memcpy(dst, m_rdata[i] + src_index, sizeof(ParticleReal));
                dst += sizeof(ParticleReal);
            }
        }
        int runtime_start_index  = AMREX_SPACEDIM + NStructReal + NArrayReal;
        for (int i = 0; i < m_num_runtime_real; ++i)
        {
            if (comm_real[runtime_start_index + i])
            {
                memcpy(dst, m_runtime_rdata[i] + src_index, sizeof(ParticleReal));
                dst += sizeof(ParticleReal);
            }
        }
        array_start_index  = 2 + NStructInt;
        for (int i = 0; i < NArrayInt; ++i)
        {
            if (comm_int[array_start_index + i])
            {
                memcpy(dst, m_idata[i] + src_index, sizeof(int));
                dst += sizeof(int);
            }
        }
        runtime_start_index  = 2 + NStructInt + NArrayInt;
        for (int i = 0; i < m_num_runtime_int; ++i)
        {
            if (comm_int[runtime_start_index + i])
            {
                memcpy(dst, m_runtime_idata[i] + src_index, sizeof(int));
                dst += sizeof(int);
            }
        }
    }

    template <typename T = ParticleType, typename std::enable_if<!T::is_soa_particle, int>::type = 0>
    AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
    SuperParticleType getSuperParticle (int index) const noexcept
    {
        AMREX_ASSERT(index < m_size);
        SuperParticleType sp;
        for (int i = 0; i < AMREX_SPACEDIM; ++i)
            sp.pos(i) = m_aos[index].pos(i);
        for (int i = 0; i < NStructReal; ++i)
            sp.rdata(i) = m_aos[index].rdata(i);
        if constexpr(NArrayReal > 0)    
            for (int i = 0; i < NArrayReal; ++i)
                sp.rdata(NStructReal+i) = m_rdata[i][index];
        sp.id() = m_aos[index].id();
        sp.cpu() = m_aos[index].cpu();
        for (int i = 0; i < NStructInt; ++i)
            sp.idata(i) = m_aos[index].idata(i);
        if constexpr(NArrayInt > 0)
            for (int i = 0; i < NArrayInt; ++i)
                sp.idata(NStructInt+i) = m_idata[i][index];
        return sp;
    }

    template <typename T = ParticleType, typename std::enable_if<T::is_soa_particle, int>::type = 0>
    AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
    SuperParticleType getSuperParticle (int index) const noexcept
    {
        AMREX_ASSERT(index < m_size);
        SuperParticleType sp;
        for (int i = 0; i < AMREX_SPACEDIM; ++i)
            sp.pos(i) = m_rdata[i][index];
        for (int i = 0; i < NStructReal; ++i)
            sp.rdata(i) = m_rdata[i][index];
        for (int i = 0; i < NAR; ++i)
            sp.rdata(NStructReal+i) = m_rdata[i][index];
        sp.id() = m_idata[0][index];
        sp.cpu() = m_idata[1][index];
        for (int i = 0; i < NStructInt; ++i)
            sp.idata(i) = m_idata[i][index];
        for (int i = 0; i < NAI; ++i)
            sp.idata(NStructInt+i) = m_idata[i][index];
        return sp;
    }
};

template <typename T_ParticleType, int NArrayReal, int NArrayInt,
          template<class> class Allocator=DefaultAllocator>
struct ParticleTile
{
    template <typename T>
    using AllocatorType = Allocator<T>;

    using ParticleType = T_ParticleType;
    static constexpr int NAR = NArrayReal;
    static constexpr int NAI = NArrayInt;
    using RealType = typename ParticleType::RealType;

    static constexpr int NStructReal = ParticleType::NReal;
    static constexpr int NStructInt = ParticleType::NInt;

    using SuperParticleType = Particle<NStructReal + NArrayReal, NStructInt + NArrayInt>;

    using AoS = ArrayOfStructs<ParticleType, Allocator>;
    //using ParticleVector = typename AoS::ParticleVector;

    using SoA = StructOfArrays<NArrayReal, NArrayInt, Allocator>;
    using RealVector = typename SoA::RealVector;
    using IntVector = typename SoA::IntVector;
    using StorageParticleType = typename ParticleType::StorageParticleType;

    using ParticleTileDataType = ParticleTileData<StorageParticleType, NArrayReal, NArrayInt>;
    using ConstParticleTileDataType = ConstParticleTileData<StorageParticleType, NArrayReal, NArrayInt>;

    ParticleTile ()
        : m_defined(false)
    {}

    void define (int a_num_runtime_real, int a_num_runtime_int)
    {
        m_defined = true;
        GetStructOfArrays().define(a_num_runtime_real, a_num_runtime_int);
        m_runtime_r_ptrs.resize(a_num_runtime_real);
        m_runtime_i_ptrs.resize(a_num_runtime_int);
        m_runtime_r_cptrs.resize(a_num_runtime_real);
        m_runtime_i_cptrs.resize(a_num_runtime_int);
    }

    // Get cpu data 

    // AoS
    template <typename T = ParticleType, typename std::enable_if<T::is_soa_particle, int>::type = 0>
    ParticleCPUWrapper cpu (int index) & {
        ParticleType p(this->getParticleTileData(), index);
        return p.cpu();
    }

    // const
    template <typename T = ParticleType, typename std::enable_if<T::is_soa_particle, int>::type = 0>
    ConstParticleCPUWrapper cpu (int index) const & {
        ParticleType p(this->getParticleTileData(), index);
        return p.cpu();
    }

    // SoA
    template <typename T = ParticleType, typename std::enable_if<!T::is_soa_particle, int>::type = 0>
    ParticleCPUWrapper cpu (int index) & {
        ParticleType& p = m_aos_tile().dataPtr()[index];
        return p.cpu();
    }

    // const 

    template <typename T = ParticleType, typename std::enable_if<!T::is_soa_particle, int>::type = 0>
    ConstParticleCPUWrapper cpu (int index) const & {
        ParticleType& p = m_aos_tile().dataPtr()[index];
        return p.cpu();
    }

    // Get id data

    // AoS
    template <typename T = ParticleType, typename std::enable_if<T::is_soa_particle, int>::type = 0>
    ParticleIDWrapper id (int index) & {
        ParticleType p(this->getParticleTileData(), index);
        return p.id();
    }

    // const
    template <typename T = ParticleType, typename std::enable_if<T::is_soa_particle, int>::type = 0>
    ConstParticleIDWrapper id (int index) const & {
        ParticleType p(this->getParticleTileData(), index);
        return p.id();
    }

    // SoA 
    template <typename T = ParticleType, typename std::enable_if<!T::is_soa_particle, int>::type = 0>
    ParticleIDWrapper id (int index) & {
        ParticleType& p = m_aos_tile().dataPtr()[index];
        return p.id();
    }

    // const
    template <typename T = ParticleType, typename std::enable_if<!T::is_soa_particle, int>::type = 0>
    ConstParticleIDWrapper id (int index) const & {
        ParticleType& p = m_aos_tile().dataPtr()[index];
        return p.id();
    }

    // Get positions data

    template <typename T = ParticleType, typename std::enable_if<T::is_soa_particle, int>::type = 0>
    RealType& pos (int index, int position_index) & {
        static_assert(NArrayReal == T::PTD::NAR, "ParticleTile mismatch in R");
        static_assert(NArrayInt == T::PTD::NAI, "ParticleTile mismatch in I");
        static_assert(0 == T::StorageParticleType::NReal, "ParticleTile 2 mismatch in R");
        static_assert(0 == T::StorageParticleType::NInt, "ParticleTile 2 mismatch in I");
        ParticleTileDataType x=this->getParticleTileData();
        ParticleType p(x, index);
        return p.pos(position_index);
    }

    template <typename T = ParticleType, typename std::enable_if<T::is_soa_particle, int>::type = 0>
    RealType  pos (int index, int position_index) const &
    {
        ParticleType p(this->getParticleTileData(), index);
        return p.pos(position_index);
    }

    template <typename T = ParticleType, typename std::enable_if<!T::is_soa_particle, int>::type = 0>
    RealType& pos (int index, int position_index) & {
        ParticleType& p = m_aos_tile().dataPtr()[index];
        return p.pos(position_index);
    }


    template <typename T = ParticleType, typename std::enable_if<!T::is_soa_particle, int>::type = 0>
    RealType  pos (int index, int position_index) const &
    {
        ParticleType& p = m_aos_tile().dataPtr()[index];
        return p.pos(position_index);
    }


    AoS&       GetArrayOfStructs ()       { return m_aos_tile; }
    const AoS& GetArrayOfStructs () const { return m_aos_tile; }

    SoA&       GetStructOfArrays ()       { return m_soa_tile; }
    const SoA& GetStructOfArrays () const { return m_soa_tile; }

    bool empty () const { return m_aos_tile.empty(); }

    /**
    * \brief Returns the total number of particles (real and neighbor)
    *
    */

    std::size_t size () const { return m_aos_tile.size(); }

    /**
    * \brief Returns the number of real particles (excluding neighbors)
    *
    */
    int numParticles () const { return m_aos_tile.numParticles(); }

    /**
    * \brief Returns the number of real particles (excluding neighbors)
    *
    */
    int numRealParticles () const { return m_aos_tile.numRealParticles(); }

    /**
    * \brief Returns the number of neighbor particles (excluding reals)
    *
    */
    int numNeighborParticles () const { return m_aos_tile.numNeighborParticles(); }

    /**
    * \brief Returns the total number of particles, real and neighbor
    *
    */
    int numTotalParticles () const { return m_aos_tile.numTotalParticles() ; }

    void setNumNeighbors (int num_neighbors)
    {
        m_soa_tile.setNumNeighbors(num_neighbors);
        m_aos_tile.setNumNeighbors(num_neighbors);
    }

    int getNumNeighbors ()
    {
        AMREX_ASSERT( m_soa_tile.getNumNeighbors() == m_aos_tile.getNumNeighbors() );
        return m_aos_tile.getNumNeighbors();
    }

    void resize (std::size_t count)
    {
        m_aos_tile.resize(count);
        m_soa_tile.resize(count);
    }

    ///
    /// Add one particle to this tile.
    ///
    void push_back (const ParticleType& p) { m_aos_tile().push_back(p); }

    ///
    /// Add one particle to this tile.
    ///
    template < int NR = NArrayReal, int NI = NArrayInt,
               std::enable_if_t<NR != 0 || NI != 0, int> foo = 0>
    void push_back (const SuperParticleType& sp)
    {
        auto np = numParticles();

        m_aos_tile.resize(np+1);
        m_soa_tile.resize(np+1);

        auto& arr_rdata = m_soa_tile.GetRealData();
        auto& arr_idata = m_soa_tile.GetIntData();

        for (int i = 0; i < AMREX_SPACEDIM; ++i)
            m_aos_tile[np].pos(i) = sp.pos(i);
        for (int i = 0; i < NStructReal; ++i)
            m_aos_tile[np].rdata(i) = sp.rdata(i);
        for (int i = 0; i < NArrayReal; ++i)
            arr_rdata[i][np] = sp.rdata(NStructReal+i);
        m_aos_tile[np].id() = sp.id();
        m_aos_tile[np].cpu() = sp.cpu();
        for (int i = 0; i < NStructInt; ++i)
            m_aos_tile[np].idata(i) = sp.idata(i);
        for (int i = 0; i < NArrayInt; ++i)
            arr_idata[i][np] = sp.idata(NStructInt+i);
    }

    ///
    /// Add a Real value to the struct-of-arrays at index comp.
    /// This sets the data for one particle.
    ///
    void push_back_real (int comp, ParticleReal v) {
        m_soa_tile.GetRealData(comp).push_back(v);
    }

    ///
    /// Add Real values to the struct-of-arrays, for all comps at once.
    /// This sets the data for one particle.
    ///
    void push_back_real (const std::array<ParticleReal, NArrayReal>& v) {
        for (int i = 0; i < NArrayReal; ++i) {
            m_soa_tile.GetRealData(i).push_back(v[i]);
        }
    }

    ///
    /// Add a range of Real values to the struct-of-arrays for the given comp.
    /// This sets the data for several particles at once.
    ///
    void push_back_real (int comp, const ParticleReal* beg, const ParticleReal* end) {
        auto it = m_soa_tile.GetRealData(comp).end();
        m_soa_tile.GetRealData(comp).insert(it, beg, end);
    }

    ///
    /// Add a range of Real values to the struct-of-arrays for the given comp.
    /// This sets the data for several particles at once.
    ///
    void push_back_real (int comp, amrex::Vector<amrex::ParticleReal>::const_iterator beg, amrex::Vector<amrex::ParticleReal>::const_iterator end) {
        push_back_real(comp, &(*beg), &(*end));
    }

    ///
    /// Add a range of Real values to the struct-of-arrays for the given comp.
    /// This sets the data for several particles at once.
    ///
    void push_back_real (int comp, amrex::Vector<amrex::ParticleReal> const & vec) {
        push_back_real(comp, vec.cbegin(), vec.cend());
    }

    ///
    /// Add npar copies of the Real value v to the struct-of-arrays for the given comp.
    /// This sets the data for several particles at once.
    ///
    void push_back_real (int comp, std::size_t npar, ParticleReal v) {
        auto new_size = m_soa_tile.GetRealData(comp).size() + npar;
        m_soa_tile.GetRealData(comp).resize(new_size, v);
    }

    ///
    /// Add an int value to the struct-of-arrays at index comp.
    /// This sets the data for one particle.
    ///
    void push_back_int (int comp, int v) {
        m_soa_tile.GetIntData(comp).push_back(v);
    }

    ///
    /// Add int values to the struct-of-arrays, for all comps at once.
    /// This sets the data for one particle.
    ///
    void push_back_int (const std::array<int, NArrayInt>& v) {
        for (int i = 0; i < NArrayInt; ++i) {
            m_soa_tile.GetIntData(i).push_back(v[i]);
        }
    }

    ///
    /// Add a range of int values to the struct-of-arrays for the given comp.
    /// This sets the data for several particles at once.
    ///
    void push_back_int (int comp, const int* beg, const int* end) {
        auto it = m_soa_tile.GetIntData(comp).end();
        m_soa_tile.GetIntData(comp).insert(it, beg, end);
    }

    ///
    /// Add a range of int values to the struct-of-arrays for the given comp.
    /// This sets the data for several particles at once.
    ///
    void push_back_int (int comp, amrex::Vector<int>::const_iterator beg, amrex::Vector<int>::const_iterator end) {
        push_back_int(comp, &(*beg), &(*end));
    }

    ///
    /// Add a range of int values to the struct-of-arrays for the given comp.
    /// This sets the data for several particles at once.
    ///
    void push_back_int (int comp, amrex::Vector<int> const & vec) {
        push_back_int(comp, vec.cbegin(), vec.cend());
    }

    ///
    /// Add npar copies of the int value v to the struct-of-arrays for the given comp.
    /// This sets the data for several particles at once.
    ///
    void push_back_int (int comp, std::size_t npar, int v) {
        auto new_size = m_soa_tile.GetIntData(comp).size() + npar;
        m_soa_tile.GetIntData(comp).resize(new_size, v);
    }

    int NumRealComps () const noexcept { return m_soa_tile.NumRealComps(); }

    int NumIntComps () const noexcept { return m_soa_tile.NumIntComps(); }

    int NumRuntimeRealComps () const noexcept { return m_runtime_r_ptrs.size(); }

    int NumRuntimeIntComps () const noexcept { return m_runtime_i_ptrs.size(); }

    void shrink_to_fit ()
    {
        m_aos_tile().shrink_to_fit();
        for (int j = 0; j < NumRealComps(); ++j)
        {
            auto& rdata = GetStructOfArrays().GetRealData(j);
            rdata.shrink_to_fit();
        }

        for (int j = 0; j < NumIntComps(); ++j)
        {
            auto& idata = GetStructOfArrays().GetIntData(j);
            idata.shrink_to_fit();
        }
    }

    Long capacity () const
    {
        Long nbytes = 0;
        nbytes += m_aos_tile().capacity() * sizeof(ParticleType);
        for (int j = 0; j < NumRealComps(); ++j)
        {
            auto& rdata = GetStructOfArrays().GetRealData(j);
            nbytes += rdata.capacity() * sizeof(ParticleReal);
        }

        for (int j = 0; j < NumIntComps(); ++j)
        {
            auto& idata = GetStructOfArrays().GetIntData(j);
            nbytes += idata.capacity()*sizeof(int);
        }
        return nbytes;
    }

    void swap (ParticleTile<ParticleType, NArrayReal, NArrayInt, Allocator>& other)
    {
        m_aos_tile().swap(other.GetArrayOfStructs()());
        for (int j = 0; j < NumRealComps(); ++j)
        {
            auto& rdata = GetStructOfArrays().GetRealData(j);
            rdata.swap(other.GetStructOfArrays().GetRealData(j));
        }

        for (int j = 0; j < NumIntComps(); ++j)
        {
            auto& idata = GetStructOfArrays().GetIntData(j);
            idata.swap(other.GetStructOfArrays().GetIntData(j));
        }
    }

    ParticleTileDataType getParticleTileData ()
    {
        int index = NArrayReal;
#ifdef AMREX_USE_GPU
        Gpu::HostVector<ParticleReal*> h_runtime_r_ptrs(m_runtime_r_ptrs.size());
        for (auto& r_ptr : h_runtime_r_ptrs) {
            r_ptr = m_soa_tile.GetRealData(index++).dataPtr();
        }
        if (h_runtime_r_ptrs.size() > 0) {
            Gpu::htod_memcpy_async(m_runtime_r_ptrs.data(), h_runtime_r_ptrs.data(),
                                   h_runtime_r_ptrs.size()*sizeof(ParticleReal*));
        }
#else
        for (auto& r_ptr : m_runtime_r_ptrs) {
            r_ptr = m_soa_tile.GetRealData(index++).dataPtr();
        }
#endif

        index = NArrayInt;
#ifdef AMREX_USE_GPU
        Gpu::HostVector<int*> h_runtime_i_ptrs(m_runtime_i_ptrs.size());
        for (auto& i_ptr : h_runtime_i_ptrs) {
            i_ptr = m_soa_tile.GetIntData(index++).dataPtr();
        }
        if (h_runtime_i_ptrs.size() > 0) {
            Gpu::htod_memcpy_async(m_runtime_i_ptrs.data(), h_runtime_i_ptrs.data(),
                                   h_runtime_i_ptrs.size()*sizeof(int*));
        }
#else
        for (auto& i_ptr : m_runtime_i_ptrs) {
            i_ptr = m_soa_tile.GetIntData(index++).dataPtr();
        }
#endif

        ParticleTileDataType ptd;
        ptd.m_aos = m_aos_tile().dataPtr();
        if constexpr(NArrayReal > 0)
            for (int i = 0; i < NArrayReal; ++i)
                ptd.m_rdata[i] = m_soa_tile.GetRealData(i).dataPtr();
        if constexpr(NArrayInt > 0)
            for (int i = 0; i < NArrayInt; ++i)
                ptd.m_idata[i] = m_soa_tile.GetIntData(i).dataPtr();
        ptd.m_size = size();
        ptd.m_num_runtime_real = m_runtime_r_ptrs.size();
        ptd.m_num_runtime_int = m_runtime_i_ptrs.size();
        ptd.m_runtime_rdata = m_runtime_r_ptrs.dataPtr();
        ptd.m_runtime_idata = m_runtime_i_ptrs.dataPtr();

#ifdef AMREX_USE_GPU
        if ((h_runtime_r_ptrs.size() > 0) || (h_runtime_i_ptrs.size() > 0)) {
            Gpu::streamSynchronize();
        }
#endif

        return ptd;
    }

    ConstParticleTileDataType getConstParticleTileData () const
    {
        int index = NArrayReal;
#ifdef AMREX_USE_GPU
        Gpu::HostVector<ParticleReal const*> h_runtime_r_cptrs(m_runtime_r_cptrs.size());
        for (auto& r_ptr : h_runtime_r_cptrs) {
            r_ptr = m_soa_tile.GetRealData(index++).dataPtr();
        }
        if (h_runtime_r_cptrs.size() > 0) {
            Gpu::htod_memcpy_async(m_runtime_r_cptrs.data(), h_runtime_r_cptrs.data(),
                                   h_runtime_r_cptrs.size()*sizeof(ParticleReal const*));
        }
#else
        for (auto& r_ptr : m_runtime_r_cptrs) {
            r_ptr = m_soa_tile.GetRealData(index++).dataPtr();
        }
#endif

        index = NArrayInt;
#ifdef AMREX_USE_GPU
        Gpu::HostVector<int const*> h_runtime_i_cptrs(m_runtime_i_cptrs.size());
        for (auto& i_ptr : h_runtime_i_cptrs) {
            i_ptr = m_soa_tile.GetIntData(index++).dataPtr();
        }
        if (h_runtime_i_cptrs.size() > 0) {
            Gpu::htod_memcpy_async(m_runtime_i_cptrs.data(), h_runtime_i_cptrs.data(),
                                   h_runtime_i_cptrs.size()*sizeof(int const*));
        }
#else
        for (auto& i_ptr : m_runtime_i_cptrs) {
            i_ptr = m_soa_tile.GetIntData(index++).dataPtr();
        }
#endif

        ConstParticleTileDataType ptd;
        ptd.m_aos = m_aos_tile().dataPtr();
        if constexpr(NArrayReal > 0)
            for (int i = 0; i < NArrayReal; ++i)
                ptd.m_rdata[i] = m_soa_tile.GetRealData(i).dataPtr();
        if constexpr(NArrayInt > 0)
            for (int i = 0; i < NArrayInt; ++i)
                ptd.m_idata[i] = m_soa_tile.GetIntData(i).dataPtr();
        ptd.m_size = size();
        ptd.m_num_runtime_real = m_runtime_r_cptrs.size();
        ptd.m_num_runtime_int = m_runtime_i_cptrs.size();
        ptd.m_runtime_rdata = m_runtime_r_cptrs.dataPtr();
        ptd.m_runtime_idata = m_runtime_i_cptrs.dataPtr();

#ifdef AMREX_USE_GPU
        if ((h_runtime_r_cptrs.size() > 0) || (h_runtime_i_cptrs.size() > 0)) {
            Gpu::streamSynchronize();
        }
#endif

        return ptd;
    }

private:

    AoS m_aos_tile;
    SoA m_soa_tile;

    bool m_defined;

    amrex::PODVector<ParticleReal*, Allocator<ParticleReal*> > m_runtime_r_ptrs;
    amrex::PODVector<int*, Allocator<int*> > m_runtime_i_ptrs;

    mutable amrex::PODVector<const ParticleReal*, Allocator<const ParticleReal*> > m_runtime_r_cptrs;
    mutable amrex::PODVector<const int*, Allocator<const int*> >m_runtime_i_cptrs;
};

} // namespace amrex;

#endif // AMREX_PARTICLETILE_H_

