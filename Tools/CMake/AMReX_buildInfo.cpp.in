namespace amrex {

const char* buildInfoGetBuildDate() {

  static const char BUILD_DATE[] = @BUILD_DATE@;
  return BUILD_DATE;
}

const char* buildInfoGetBuildDir() {

  static const char BUILD_DIR[] = "@BUILD_DIR@";
  return BUILD_DIR;
}

const char* buildInfoGetBuildMachine() {

  static const char BUILD_MACHINE[] = "@BUILD_MACHINE@";
  return BUILD_MACHINE;
}

const char* buildInfoGetAMReXDir() {

  static const char AMREX_DIR[] = "@AMREX_TOP_DIR@";
  return AMREX_DIR;
}

const char* buildInfoGetComp() {

  static const char COMP[] = "@CMAKE_CXX_COMPILER_ID@";
  return COMP;
}

const char* buildInfoGetCompVersion() {

  static const char COMP_VERSION[] = "@CMAKE_CXX_COMPILER_VERSION@";
  return COMP_VERSION;
}

// deprecated
const char* buildInfoGetFcomp() {

  static const char FCOMP[] = "@CMAKE_Fortran_COMPILER_ID@";
  return FCOMP;
}

// deprecated
const char* buildInfoGetFcompVersion() {

  static const char FCOMP_VERSION[] = "@CMAKE_Fortran_COMPILER_VERSION@";
  return FCOMP_VERSION;
}

const char* buildInfoGetCXXName() {

  static const char CXX_comp_name[] = "@CMAKE_CXX_COMPILER@";
  return CXX_comp_name;
}

const char* buildInfoGetFName() {

  static const char F_comp_name[] = "@CMAKE_Fortran_COMPILER@";
  return F_comp_name;
}

const char* buildInfoGetCXXFlags() {

  static const char CXX_flags[] = "@CXX_FLAGS@";
  return CXX_flags;
}

const char* buildInfoGetFFlags() {

  static const char F_flags[] = "@Fortran_FLAGS@";
  return F_flags;
}

const char* buildInfoGetLinkFlags() {

  static const char link_flags[] = "@LINK_FLAGS@";
  return link_flags;
}

const char* buildInfoGetLibraries() {

  static const char libraries[] = "@LIBRARIES@";
  return libraries;
}

const char* buildInfoGetAux(int i) {

  //static const char AUX1[] = "${AUX[1]}";
  @AUX_DECLS@
  static const char EMPT[] = "";

  switch(i)
  {
    @AUX_CASE@
    default: return EMPT;
  }
}

int buildInfoGetNumModules() {
  // int num_modules = X;
  @NUM_MODULES@
  return num_modules;
}

const char* buildInfoGetModuleName(int i) {

  //static const char MNAME1[] = "${MNAME[1]}";
  @MNAME_DECLS@
  static const char EMPT[] = "";

  switch(i)
  {
    @MNAME_CASE@
    default: return EMPT;
  }
}

const char* buildInfoGetModuleVal(int i) {

  //static const char MVAL1[] = "${MVAL[1]}";
  @MVAL_DECLS@
  static const char EMPT[] = "";

  switch(i)
  {
    @MVAL_CASE@
    default: return EMPT;
  }
}

const char* buildInfoGetGitHash(int i) {

  //static const char HASH1[] = "${GIT[1]}";
  @GIT_DECLS@
  static const char EMPT[] = "";

  switch(i)
  {
    @GIT_CASE@
    default: return EMPT;
  }
}

const char* buildInfoGetBuildGitHash() {

  //static const char HASH[] = "${GIT}";
  @BUILDGIT_DECLS@

  return HASH;
}

const char* buildInfoGetBuildGitName() {

  //static const char NAME[] = "";
  @BUILDGIT_NAME@

  return NAME;
}

}
