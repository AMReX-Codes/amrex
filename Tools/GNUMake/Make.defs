# Check python version
my_python_version := $(word 2, $(shell python --version 2>&1))
ifneq ($(firstword $(sort 2.7 $(my_python_version))), 2.7)
  $(error Python >= 2.7 required! Your version is $(my_python_version))
endif

ifneq (,$(findstring ~,$(AMREX_HOME)))
  $(warning *** AMREX_HOME string constains ~ and make will not like it. So it is replaced.)
  AMREX_HOME := $(shell echo $(AMREX_HOME))
endif

include $(AMREX_HOME)/Tools/GNUMake/Make.machines

ifdef AMREX_XSDK
  AMREX_XSDK := $(strip $(AMREX_XSDK))
else
  AMREX_XSDK := FALSE
endif

ifdef PRECISION
  PRECISION := $(strip $(PRECISION))
else
  PRECISION := DOUBLE
endif

ifdef DEBUG
  DEBUG := $(strip $(DEBUG))
else
  DEBUG := TRUE
endif

ifdef PROFILE
  PROFILE := $(strip $(PROFILE))
else
  PROFILE := FALSE
endif

ifdef TRACE_PROFILE
  TRACE_PROFILE := $(strip $(TRACE_PROFILE))
else
  TRACE_PROFILE := FALSE
endif
ifeq ($(TRACE_PROFILE),TRUE)
  PROFILE := TRUE
endif

ifdef COMM_PROFILE
  COMM_PROFILE := $(strip $(COMM_PROFILE))
else
  COMM_PROFILE := FALSE
endif
ifeq ($(COMM_PROFILE),TRUE)
  PROFILE := TRUE
endif

ifdef MEM_PROFILE
  MEM_PROFILE := $(strip $(MEM_PROFILE))
else
  MEM_PROFILE := FALSE
endif

ifdef USE_PROFPARSER
  USE_PROFPARSER := $(strip $(USE_PROFPARSER))
else
  USE_PROFPARSER := FALSE
endif

ifdef THIRD_PARTY_PROFILING
  TP_PROFILING := $(strip $(THIRD_PARTY_PROFILING))
else
  TP_PROFILING := FALSE
endif

ifdef TEST
  TEST := $(strip $(TEST))
else
  TEST := FALSE
endif

ifdef USE_ASSERTION
  USE_ASSERTION := $(strip $(USE_ASSERTION))
else
  USE_ASSERTION := FALSE
endif

ifdef BACKTRACE
  BACKTRACE := $(strip $(BACKTRACE))
else
  BACKTRACE := FALSE
endif

ifdef LAZY
  LAZY := $(strip $(LAZY))
else
  LAZY := FALSE
endif

ifndef DIM
  $(error DIM must be set)
else
  DIM := $(strip $(DIM))
endif

ifdef USE_MPI
  USE_MPI := $(strip $(USE_MPI))
else
  USE_MPI := FALSE
endif

ifeq ($(USE_PMI), TRUE)
  DEFINES += -DAMREX_PMI
endif

ifdef USE_UPCXX
  USE_UPCXX := $(strip $(USE_UPCXX))
else
  USE_UPCXX := FALSE
endif
ifeq ($(USE_UPCXX),TRUE)
  USE_MPI := TRUE
endif

ifdef USE_MPI3
  USE_MPI3 := $(strip $(USE_MPI3))
else
  USE_MPI3 := FALSE
endif
ifeq ($(USE_MPI3),TRUE)
  USE_MPI := TRUE
endif

ifdef DIMENSION_AGNOSTIC
  DIMENSION_AGNOSTIC := $(strip $(DIMENSION_AGNOSTIC))
else
  DIMENSION_AGNOSTIC := FALSE
endif

ifdef USE_EB
  USE_EB := $(strip $(USE_EB))
else
  USE_EB := FALSE
endif

ifdef EBASE
  EBASE := $(strip $(EBASE))
else
  EBASE := main
endif

AMREX_GIT_VERSION := $(shell cd $(AMREX_HOME); git describe --abbrev=12 --dirty --always --tags)
DEFINES += -DAMREX_GIT_VERSION=\"$(AMREX_GIT_VERSION)\"

FORTLINK  	= UNDERSCORE

FORT_CPP        = cpp -E -traditional-cpp -P
FORTPREP  	= perl $(AMREX_HOME)/Tools/C_scripts/strip72 -c
F90PREP  	= cat  # a placeholder in case we have to write something later
CPP_PREFIX      = 
MKDEP		= perl $(AMREX_HOME)/Tools/C_scripts/mkdep
MODDEP		= $(AMREX_HOME)/Tools/F_scripts/dep.py
CHECKFORT       = $(AMREX_HOME)/Tools/typechecker/typechecker.py
MKCONFIG        = $(AMREX_HOME)/Tools/libamrex/mkconfig.py

RANLIB          = ranlib

EXE_OUTPUT_OPTION      = -o $(objEXETempDir)/$*.o
FORT_EXE_OUTPUT_OPTION = -o $(objEXETempDir)/$*.o


lowercase_comp = $(shell echo $(COMP) | tr A-Z a-z)

ifeq ($(lowercase_comp),$(filter $(lowercase_comp),gcc gnu g++))
  lowercase_comp = gnu
  $(info Loading $(AMREX_HOME)/Tools/GNUMake/comps/gnu.mak...)
  include        $(AMREX_HOME)/Tools/GNUMake/comps/gnu.mak
else ifeq ($(lowercase_comp),intel)
  $(info Loading $(AMREX_HOME)/Tools/GNUMake/comps/intel.mak...)
  include        $(AMREX_HOME)/Tools/GNUMake/comps/intel.mak
else ifeq ($(lowercase_comp),cray)
  $(info Loading $(AMREX_HOME)/Tools/GNUMake/comps/cray.mak...)
  include        $(AMREX_HOME)/Tools/GNUMake/comps/cray.mak
else ifeq ($(lowercase_comp),pgi)
  $(info Loading $(AMREX_HOME)/Tools/GNUMake/comps/pgi.mak...)
  include        $(AMREX_HOME)/Tools/GNUMake/comps/pgi.mak
else ifeq ($(lowercase_comp),ibm)
  $(info Loading $(AMREX_HOME)/Tools/GNUMake/comps/ibm.mak...)
  include        $(AMREX_HOME)/Tools/GNUMake/comps/ibm.mak
else ifeq ($(lowercase_comp),$(filter $(lowercase_comp),llvm clang clang++))
  lowercase_comp = llvm
  $(info Loading $(AMREX_HOME)/Tools/GNUMake/comps/llvm.mak...)
  include        $(AMREX_HOME)/Tools/GNUMake/comps/llvm.mak
else ifeq ($(lowercase_comp),$(filter $(lowercase_comp),llvm-flang flang))
  lowercase_comp = llvm-flang
  $(info Loading $(AMREX_HOME)/Tools/GNUMake/comps/llvm-flang.mak...)
  include        $(AMREX_HOME)/Tools/GNUMake/comps/llvm-flang.mak
else ifeq ($(lowercase_comp),nag)
  $(info Loading $(AMREX_HOME)/Tools/GNUMake/comps/nag.mak...)
  include        $(AMREX_HOME)/Tools/GNUMake/comps/nag.mak
else
  $(error Unknown compiler $(COMP). Supported compilers are gnu, intel, cray, pgi, ibm, llvm, and nag)
endif

ifeq ($(MAKECMDGOALS),check_fortran)
  ifneq ($(lowercase_comp),gnu)
    $(error make check_fortran only works with COMP=gnu)
  endif
endif

ifeq ($(DEBUG),TRUE)
    CPPFLAGS	+= -DAMREX_DEBUG
    DebugSuffix := .DEBUG
else
    ifneq ($(AMREX_XSDK),TRUE)
        CPPFLAGS += -DNDEBUG
    endif
    DebugSuffix :=
endif

ifeq ($(USE_PROFPARSER),TRUE)
  PROFILE := TRUE
  TRACE_PROFILE := TRUE

  CPPFLAGS += -DBL_USE_PROFPARSER -DAMREX_USE_PROFPARSER
  include $(AMREX_HOME)/Src/Extern/ProfParser/Make.package
  include $(AMREX_HOME)/Src/Extern/amrdata/Make.package
endif

ifeq ($(PROFILE),TRUE)
    CPPFLAGS    += -DBL_PROFILING -DAMREX_PROFILING
    ifeq ($(TRACE_PROFILE)$(COMM_PROFILE),TRUETRUE)
        CPPFLAGS    += -DBL_TRACE_PROFILING -DAMREX_TRACE_PROFILING
        CPPFLAGS    += -DBL_COMM_PROFILING -DAMREX_COMM_PROFILING
        ProfSuffix	:= .COMTR_PROF
    endif
    ifeq ($(TRACE_PROFILE)$(COMM_PROFILE),TRUEFALSE)
        CPPFLAGS    += -DBL_TRACE_PROFILING -DAMREX_TRACE_PROFILING
        ProfSuffix	:= .TRACE_PROF
    endif
    ifeq ($(TRACE_PROFILE)$(COMM_PROFILE),FALSETRUE)
        CPPFLAGS    += -DBL_COMM_PROFILING -DAMREX_COMM_PROFILING
        ProfSuffix	:= .COMM_PROF
    endif
    ifeq ($(TRACE_PROFILE)$(COMM_PROFILE),FALSEFALSE)
        ProfSuffix	:= .PROF
    endif
else
    ifndef TINY_PROFILE
        TINY_PROFILE = FALSE
    endif
    ifeq ($(TINY_PROFILE),TRUE)
        CPPFLAGS    += -DBL_TINY_PROFILING -DAMREX_TINY_PROFILING
        ProfSuffix	:= .TPROF
    else
        ProfSuffix	:=
    endif
endif

ifeq ($(MEM_PROFILE),TRUE)
  CPPFLAGS += -DBL_MEM_PROFILING -DAMREX_MEM_PROFILING
  MProfSuffix := .MPROF
else
  MProfSuffix :=
endif

ifeq ($(TEST),TRUE)
    CPPFLAGS += -DBL_TESTING -DAMREX_TESTING
    ifneq ($(DEBUG),TRUE)
        DebugSuffix := .TEST
    endif
endif

ifeq ($(BACKTRACE),TRUE)
    CPPFLAGS += -DBL_BACKTRACING -DBL_TESTING -DAMREX_BACKTRACING -DAMREX_TESTING
    BTSuffix := .BT
else
    BTSuffix :=
endif

ifdef CRAY_CPU_TARGET
    archSuffix += .$(strip $(CRAY_CPU_TARGET))
endif

ifeq ($(LAZY),TRUE)
    CPPFLAGS += -DBL_LAZY -DAMREX_LAZY
endif

ifeq ($(USE_ARRAYVIEW), TRUE)
  DEFINES += -DBL_USE_ARRAYVIEW -DAMREX_USE_ARRAYVIEW
  ARRAYVIEWDIR ?= $(AMREX_HOME)/../ArrayView
  INCLUDE_LOCATIONS += $(ARRAYVIEWDIR)
  LIBRARY_LOCATIONS += $(ARRAYVIEWDIR)
  LIBRARIES += -larrayview$(DIM)d
  VPATH_LOCATIONS   += $(ARRAYVIEWDIR)
endif

ifeq ($(USE_MPI),TRUE)
    MPISuffix	:= .MPI
    CPPFLAGS	+= -DBL_USE_MPI -DAMREX_USE_MPI
else
    MPISuffix	:=
endif

ifeq ($(USE_MPI3),TRUE)
    MPISuffix := .MPI3
    CPPFLAGS  += -DBL_USE_MPI3 -DAMREX_USE_MPI3
endif

ifeq ($(USE_UPCXX),TRUE)
    UPCXXSuffix := .UPCXX
    CPPFLAGS    += -DBL_USE_UPCXX -DAMREX_USE_UPCXX
else
    UPCXXSuffix :=
endif

ifeq ($(USE_UPCXX),TRUE)
    CPPFLAGS  += -DBL_USE_TEAM -DAMREX_USE_TEAM
else
  ifeq ($(USE_MPI3),TRUE)
    CPPFLAGS  += -DBL_USE_TEAM -DAMREX_USE_TEAM
  endif
endif

ifeq ($(USE_OMP),TRUE)
    OMPSuffix	:= .OMP
    CPPFLAGS	+= -DBL_USE_OMP -DAMREX_USE_OMP
else
    OMPSuffix	:=
endif

DEFINES += -DAMREX_LAUNCH=""
DEFINES += -DAMREX_DEVICE=""

ifeq ($(USE_SINGLE_PRECISION_PARTICLES), TRUE)
  DEFINES += -DBL_SINGLE_PRECISION_PARTICLES -DAMREX_SINGLE_PRECISION_PARTICLES
  amrex_particle_real = float
else
  amrex_particle_real = double
endif

ifeq ($(PRECISION),FLOAT)
    DEFINES += -DBL_USE_FLOAT -DAMREX_USE_FLOAT
    PrecisionSuffix := .$(PRECISION)
    amrex_real = float
else
    PrecisionSuffix :=
    amrex_real = double
endif

objStandalone	= 	$(CEXE_sources:%.cpp=%.o)			\
			$(cEXE_sources:%.c=%.o)				\
			$(fEXE_sources:%.f=%.o)				\
			$(FEXE_sources:%.F=%.o)				\
			$(f90EXE_sources:%.f90=%.o)			\
			$(F90EXE_sources:%.F90=%.o)

objForExecs	= $(addprefix $(objEXETempDir)/, $(objStandalone))

#
# <typecheck>
#
objForTypeCheckAlone = 	$(fEXE_sources:%.f=%.o)				\
			$(FEXE_sources:%.F=%.o)				\
			$(f90EXE_sources:%.f90=%.o)			\
			$(F90EXE_sources:%.F90=%.o)

objForTypeCheck      = $(addprefix $(objEXETempDir)/, $(objForTypeCheckAlone))

fortran_ir_sources_alone = $(f90EXE_sources:%.f90=%.f90.orig) \
                           $(F90EXE_sources:%.F90=%.F90.orig) \
                           $(fEXE_sources:%.f=%.f.orig) \
                           $(FEXE_sources:%.F=%.F.orig)

fortran_ir_sources = $(addprefix $(tmpEXETempDir)/, $(fortran_ir_sources_alone))

fortran_fdecl_headers = $(filter %_f.H %_F.H,$(cEXE_headers) $(CEXE_headers) $(f90EXE_headers) $(F90EXE_headers) $(fEXE_headers) $(FEXE_headers))
fortran_fdecl_headers_cppd = $(addprefix $(tmpEXETempDir)/, $(fortran_fdecl_headers:%.H=%-cppd.h))

#
# </typecheck>
#

DEFINES	+= -DBL_SPACEDIM=$(DIM)				\
           -DAMREX_SPACEDIM=$(DIM)                      \
           -DBL_FORT_USE_$(FORTLINK)			\
           -DAMREX_FORT_USE_$(FORTLINK)			\
           -DBL_$(shell uname)                          \
           -DAMREX_$(shell uname)


ifeq ($(DIMENSION_AGNOSTIC),TRUE)
DEFINES += -DAMREX_DIMENSION_AGNOSTIC
endif

ifeq ($(DEBUG),TRUE)
  DEFINES += -DBL_USE_ASSERTION -DAMREX_USE_ASSERTION
else
ifeq ($(USE_ASSERTION),TRUE)
  DEFINES += -DBL_USE_ASSERTION -DAMREX_USE_ASSERTION
endif
endif

ifeq ($(USE_PARTICLES),TRUE)
  DEFINES += -DAMREX_PARTICLES
endif

ifeq ($(USE_EB),TRUE)
    DEFINES += -DAMREX_USE_EB
endif

ifeq ($(AMREX_XSDK),TRUE)
   DEFINES += -DAMREX_XSDK
endif

includes	= -I. $(addprefix -I, $(INCLUDE_LOCATIONS))
fincludes	= $(includes)
fmoddir         = $(objEXETempDir)

CPPFLAGS	+= $(DEFINES)

libraries	= $(LIBRARIES) $(XTRALIBS)

LDFLAGS		+= -L. $(addprefix -L, $(LIBRARY_LOCATIONS))

machineSuffix	= $(lowercase_comp)$(archSuffix)$(PrecisionSuffix)$(DebugSuffix)$(ProfSuffix)$(MProfSuffix)$(BTSuffix)$(MPISuffix)$(UPCXXSuffix)$(OMPSuffix)$(USERSuffix)



optionsSuffix	= $(DIM)d.$(machineSuffix)

executable	= $(addsuffix $(optionsSuffix).ex, $(EBASE))

TmpBuildDir     = tmp_build_dir
depEXETempDir	= $(TmpBuildDir)/d/$(optionsSuffix).EXE
objEXETempDir   = $(TmpBuildDir)/o/$(optionsSuffix).EXE
f77EXETempDir	= $(TmpBuildDir)/f/$(optionsSuffix).EXE
tmpEXETempDir	= $(TmpBuildDir)/t/$(optionsSuffix).EXE

amrexlib = $(objEXETempDir)/libamrex.a

AMREX_INSTALL_DIR ?= tmp_build_dir
amrexLibDir = $(AMREX_INSTALL_DIR)/lib
amrexIncludeDir = $(AMREX_INSTALL_DIR)/include
# Do different compilers have different name convention for mod files?
amrexFortModules = $(wildcard $(objEXETempDir)/*.mod)

#
# For source code manipulation
#
CSRCALL		= $(CEXE_sources) $(CEXE_headers)
cSRCALL		= $(cEXE_sources) $(cEXE_headers)
fSRCALL		= $(fEXE_sources) $(fEXE_headers)
FSRCALL		= $(FEXE_sources) $(FEXE_headers)
f90SRCALL	= $(f90EXE_sources) $(f90EXE_headers)
F90SRCALL	= $(F90EXE_sources) $(F90EXE_headers)
allSources	= $(CSRCALL) $(FSRCALL) $(F90SRCALL) $(cSRCALL) $(fSRCALL) $(f90SRCALL)

ifeq ($(USE_CCACHE),TRUE)
  CCACHE = ccache
else
  CCACHE =
endif

# place holder
F90CACHE =

ifeq ($(TP_PROFILING),VTUNE)
  $(into Loading $(AMREX_HOME)/Tools/GNUMake/tools/Make.vtune
  include        $(AMREX_HOME)/Tools/GNUMake/tools/Make.vtune
endif

ifeq ($(TP_PROFILING),CRAYPAT)
  $(into Loading $(AMREX_HOME)/Tools/GNUMake/tools/Make.craypat
  include        $(AMREX_HOME)/Tools/GNUMake/tools/Make.craypat
endif

ifeq ($(TP_PROFILING),FORGE)
  $(into Loading $(AMREX_HOME)/Tools/GNUMake/tools/Make.forge
  include        $(AMREX_HOME)/Tools/GNUMake/tools/Make.forge
endif

# Use Sam Williams's HPGMG
ifeq ($(USE_HPGMG), TRUE)
  $(info Loading $(AMREX_HOME)/Tools/GNUMake/packages/Make.hpgmg...)
  include        $(AMREX_HOME)/Tools/GNUMake/packages/Make.hpgmg
endif

ifneq ("$(wildcard $(AMREX_HOME)/Tools/GNUMake/sites/Make.$(host_name))","")
  $(info Loading $(AMREX_HOME)/Tools/GNUMake/sites/Make.$(host_name)...)
  include        $(AMREX_HOME)/Tools/GNUMake/sites/Make.$(host_name)
else
  $(info Loading $(AMREX_HOME)/Tools/GNUMake/sites/Make.$(which_site)...)
  include        $(AMREX_HOME)/Tools/GNUMake/sites/Make.$(which_site)
endif

ifeq ($(USE_UPCXX),TRUE)
  $(info Loading $(AMREX_HOME)/Tools/GNUMake/Make.upcxx...)
  include        $(AMREX_HOME)/Tools/GNUMake/Make.upcxx
endif

ifeq ($(USE_CVODE),TRUE)
  $(info Loading $(AMREX_HOME)/Tools/GNUMake/packages/Make.cvode...)
  include        $(AMREX_HOME)/Tools/GNUMake/packages/Make.cvode
endif

ifeq ($(USE_HYPRE),TRUE)
  $(info Loading $(AMREX_HOME)/Tools/GNUMake/packages/Make.hypre...)
  include        $(AMREX_HOME)/Tools/GNUMake/packages/Make.hypre
endif

ifneq ("$(wildcard $(AMREX_HOME)/Tools/GNUMake/Make.local)","")
  $(info Loading $(AMREX_HOME)/Tools/GNUMake/Make.local...)
  include        $(AMREX_HOME)/Tools/GNUMake/Make.local
endif

