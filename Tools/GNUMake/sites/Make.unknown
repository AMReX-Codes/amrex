#
# Generic setup mainly for MPI stuff
#

os_type := $(shell uname)

ifneq ($(NO_CONFIG_CHECKING),TRUE)

ifneq ($(NO_MPI_CHECKING),TRUE)
ifeq ($(USE_MPI),TRUE)

  CXX := mpicxx
  CC  := mpicc
  FC  := mpif90
  F90 := mpif90

  ifeq ($(LINK_WITH_FORTRAN_COMPILER),TRUE)
    MPI_OTHER_COMP := mpicxx
  else
    MPI_OTHER_COMP := mpif90
  endif

  # error codes - find flag that displays the link line wrapper. 
  code_sml := $(shell $(MPI_OTHER_COMP) -showme:link > /dev/null 2>&1; echo $$?)
  code_li :=  $(shell $(MPI_OTHER_COMP) -link_info   > /dev/null 2>&1; echo $$?)

  # use correct flag to store link line and cxx libraries (-l%).
  ifeq ($(code_sml), 0)
     mpi_link_flags  := $(shell $(MPI_OTHER_COMP) -showme:link)
     mpicxx_link_libs := $(filter -l%,$(shell mpicxx -showme:link))
  else ifeq ($(code_li), 0)
     mpi_link_flags  := $(shell $(MPI_OTHER_COMP) -link_info)
     mpicxx_link_libs := $(filter -l%,$(shell mpicxx -link_info))
  else
     $(error Unknown mpi wrapper.  You can try setting MPI stuff in amrex/Tools/GNUMake/Make.local and then compile with NO_MPI_CHECKING=TRUE.)
  endif

  # some compilers return the compiler command as part of the link line info.
  # filter out first word in link line, if it doesn't start with a dash, e.g. "gfortran".
  mpi_filter := $(filter-out -%, $(firstword $(mpi_link_flags)))
  ifneq ($(mpi_filter),)
     mpi_link_flags := $(filter-out $(mpi_filter), $(mpi_link_flags))
  endif

  LIBRARIES += $(mpi_link_flags) $(mpicxx_link_libs)

  # OpenMPI specific flag
  # Uncomment if statement if flag causes issue with another compiler.
  #ifneq ($(findstring Open MPI, $(shell $(MPI_OTHER_COMP) -showme:version 2>&1)),)
     DEFINES += -DOMPI_SKIP_MPICXX
  #endif

endif
endif



ifneq ($(NO_CUDA_CHECKING),TRUE)
ifeq ($(USE_CUDA),TRUE)
  CUDA_HOME ?= /usr/local/cuda

  COMPILE_CUDA_PATH = $(CUDA_HOME)
  SYSTEM_CUDA_PATH = $(CUDA_HOME)

  cuda_device_query_result := $(shell $(CUDA_HOME)/extras/demo_suite/deviceQuery | grep "CUDA Capability")
  ifneq ($(cuda_device_query_result),)
     TEMP_CUDA_ARCH = $(lastword $(cuda_device_query_result))
#      CUDA_ARCH = $(subst .,,$(TEMP_CUDA_ARCH))
     # We do this because pgfortran does not support all cuda arches.
     ifeq ($(TEMP_CUDA_ARCH),3.5)
         CUDA_ARCH = 35
     else
         CUDA_ARCH = $(firstword $(subst ., ,$(TEMP_CUDA_ARCH)))0
     endif
  endif
endif
endif

endif

FIX_NVCC_PTHREAD=TRUE
