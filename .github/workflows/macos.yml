name: macos

on: [push, pull_request]

concurrency:
  group: ${{ github.ref }}-${{ github.head_ref }}-macos
  cancel-in-progress: true

jobs:
  # Build libamrex and all tests
  tests-macos-universal-nompi:
    name: AppleClang Universal w/o MPI [tests-universal]
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    - name: Dependencies
      run: .github/workflows/dependencies/dependencies_mac.sh
    - name: Set Up Cache
      uses: actions/cache@v3
      with:
        path: /Users/runner/Library/Caches/ccache
        key: ccache-${{ github.workflow }}-${{ github.job }}-git-${{ github.sha }}
        restore-keys: |
             ccache-${{ github.workflow }}-${{ github.job }}-git-
    - name: Build & Install
      env:
        # build universal binaries for M1 "Apple Silicon" and Intel CPUs
        CMAKE_OSX_ARCHITECTURES: "arm64;x86_64"
        CXXFLAGS: "-fno-operator-names -Werror -Wall -Wextra -Wpedantic -Wnull-dereference -Wfloat-conversion -Wshadow -Woverloaded-virtual -Wextra-semi -Wunreachable-code -Wnon-virtual-dtor -Wno-c++17-extensions -Wno-range-loop-analysis"
        # -Wno-range-loop-analysis: Apple clang has a bug in range-loop-analysis
      run: |
        export CCACHE_COMPRESS=1
        export CCACHE_COMPRESSLEVEL=10
        export CCACHE_MAXSIZE=125M
        ccache -z

        cmake -S . -B build             \
            -DBUILD_SHARED_LIBS=ON      \
            -DCMAKE_BUILD_TYPE=Release  \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DAMReX_EB=ON               \
            -DAMReX_MPI=OFF             \
            -DAMReX_ENABLE_TESTS=ON     \
            -DAMReX_PARTICLES=ON        \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        cmake --build build --parallel 2

        ctest --test-dir build --output-on-failure

        ccache -s

  # Build libamrex and all tests
  tests-macos:
    name: AppleClang@11.0 GFortran@9.3 [tests]
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    - name: Dependencies
      run: .github/workflows/dependencies/dependencies_mac.sh
    - name: Set Up Cache
      uses: actions/cache@v3
      with:
        path: /Users/runner/Library/Caches/ccache
        key: ccache-${{ github.workflow }}-${{ github.job }}-git-${{ github.sha }}
        restore-keys: |
             ccache-${{ github.workflow }}-${{ github.job }}-git-
    - name: Build & Install
      env:
        CXXFLAGS: "-fno-operator-names -Werror -Wall -Wextra -Wpedantic -Wnull-dereference -Wfloat-conversion -Wshadow -Woverloaded-virtual -Wextra-semi -Wunreachable-code -Wnon-virtual-dtor -Wno-c++17-extensions -Wno-range-loop-analysis"
        # -Wno-range-loop-analysis: Apple clang has a bug in range-loop-analysis
      run: |
        export CCACHE_COMPRESS=1
        export CCACHE_COMPRESSLEVEL=10
        export CCACHE_MAXSIZE=250M
        ccache -z

        cmake -S . -B build             \
            -DCMAKE_BUILD_TYPE=Debug    \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DAMReX_EB=ON               \
            -DAMReX_ENABLE_TESTS=ON     \
            -DAMReX_PARTICLES=ON        \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        cmake --build build --parallel 2
        cmake --build build --target install

        ctest --test-dir build --output-on-failure

        ccache -s

  cache_eviction:
    name: Cache Eviction for ${{ github.workflow }}
    if: ${{ always() }}
    needs: [tests-macos-universal-nompi, tests-macos]
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Clean up cache
        run: |
          gh extension install actions/gh-actions-cache

          WORKFLOW=${{ github.workflow }}
          REPO=${{ github.repository }}
          BRANCH=${{ github.ref }}

          ## Setting this to not fail the workflow while deleting cache keys.
          set +e

          MYJOBS="tests-macos-universal-nompi tests-macos"
          for myjob in $MYJOBS
          do
            key_prefix="ccache-${WORKFLOW}-${myjob}-git-"
            old_keys=$(gh actions-cache list -R $REPO -B $BRANCH --key $key_prefix --sort last-used | cut -f 1 | tail -n +2)
            ## tail -n +2 keeps the last used key

            for key in $old_keys
            do
                gh actions-cache delete $key -R $REPO -B $BRANCH --confirm
            done
          done
          echo "Done"
