name: windows

on: [push, pull_request]

concurrency:
  group: ${{ github.ref }}-${{ github.head_ref }}-windows
  cancel-in-progress: true

jobs:
  # Build libamrex and all tests
  tests_msvc:
    name: MSVC C++17 w/o Fortran w/o MPI
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    #- name: Set Up Cache
    #  uses: actions/cache@v3
    #  with:
    #    path: ~/.ccache
    #    key: ccache-${{ github.workflow }}-${{ github.job }}-git-${{ github.sha }}
    #    restore-keys: |
    #         ccache-${{ github.workflow }}-${{ github.job }}-git-
    #- name: Install Ccache
    #  run: |
    #    Invoke-WebRequest https://github.com/ccache/ccache/releases/download/v4.8/ccache-4.8-windows-x86_64.zip -OutFile ccache-4.8-windows-x86_64.zip
    #    Expand-Archive ccache-4.8-windows-x86_64.zip
    - name: Build & Install
      run: |
        #$ccachepath = Join-Path $pwd "ccache-4.8-windows-x86_64"
        #$Env:PATH += ";$ccachepath"
        #$ccachecachedir = Join-Path $HOME ".ccache"
        #$Env:CCACHE_DIR="$ccachecachedir"
        #$Env:CCACHE_DIR
        #$Env:CCACHE_COMPRESS='1'
        #$Env:CCACHE_COMPRESSLEVEL='10'
        #$Env:CCACHE_MAXSIZE='105M'
        #ccache -z

        cmake -S . -B build   `
              -DBUILD_SHARED_LIBS=ON        `
              -DCMAKE_VERBOSE_MAKEFILE=ON   `
              -DAMReX_EB=OFF                `
              -DAMReX_ENABLE_TESTS=ON       `
              -DAMReX_FORTRAN=OFF           `
              -DAMReX_MPI=OFF
              #-DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        cmake --build build --config Debug -j 4

        cmake --build build --config Debug --target install

        $Env:PATH += ";D:\\a\amrex\amrex\installdir\bin"
        cmake --build build --config Debug --target test_install

        #ccache -s

  # Build libamrex and all test (static)
  test_msvc_static:
    name: MSVC C++17 w/o Fortran w/o MPI static
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    #- name: Set Up Cache
    #  uses: actions/cache@v3
    #  with:
    #    path: ~/.ccache
    #    key: ccache-${{ github.workflow }}-${{ github.job }}-git-${{ github.sha }}
    #    restore-keys: |
    #         ccache-${{ github.workflow }}-${{ github.job }}-git-
    #- name: Install Ccache
    #  run: |
    #    Invoke-WebRequest https://github.com/ccache/ccache/releases/download/v4.8/ccache-4.8-windows-x86_64.zip -OutFile ccache-4.8-windows-x86_64.zip
    #    Expand-Archive ccache-4.8-windows-x86_64.zip
    - name: Build & Install
      run: |
        #$ccachepath = Join-Path $pwd "ccache-4.8-windows-x86_64"
        #$Env:PATH += ";$ccachepath"
        #$ccachecachedir = Join-Path $HOME ".ccache"
        #$Env:CCACHE_DIR="$ccachecachedir"
        #$Env:CCACHE_COMPRESS='1'
        #$Env:CCACHE_COMPRESSLEVEL='10'
        #$Env:CCACHE_MAXSIZE='135M'
        #ccache -z

        cmake -S . -B build   `
              -DCMAKE_VERBOSE_MAKEFILE=ON   `
              -DAMReX_EB=ON                 `
              -DAMReX_ENABLE_TESTS=ON       `
              -DAMReX_FORTRAN=OFF           `
              -DAMReX_MPI=OFF
              #-DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        cmake --build build --config RelWithDebInfo -j 4

        cmake --build build --config RelWithDebInfo --target install
        cmake --build build --config RelWithDebInfo --target test_install

        #ccache -s

  # Build libamrex and all tests
  tests_clang:
    name: Clang C++17 w/o Fortran w/o MPI
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - uses: seanmiddleditch/gha-setup-ninja@master
    - name: Build & Install
      shell: cmd
      env:
        CMAKE_GENERATOR_TOOLSET: "ClangCl"
        CMAKE_GENERATOR: "Visual Studio 17 2022"
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\vc\Auxiliary\build\vcvarsall.bat" x64
        cmake -S . -B build   ^
              -DBUILD_SHARED_LIBS=ON        ^
              -DCMAKE_VERBOSE_MAKEFILE=ON   ^
              -DAMReX_EB=ON                 ^
              -DAMReX_ENABLE_TESTS=ON       ^
              -DAMReX_FORTRAN=OFF           ^
              -DAMReX_MPI=OFF               ^
              -DAMReX_OMP=ON
        cmake --build build --config Release -j 4

        cmake --build build --config Release --target install

        set "PATH=%PATH%;D:\\a\amrex\amrex\installdir\bin"
        cmake --build build --config Release --target test_install

  # If we add ccache back, don't forget to update cleanup-cache.yml
  #save_pr_number:
  #  if: github.event_name == 'pull_request'
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Save PR number
  #      env:
  #        PR_NUMBER: ${{ github.event.number }}
  #      run: |
  #        echo $PR_NUMBER > pr_number.txt
  #    - uses: actions/upload-artifact@v3
  #      with:
  #        name: pr_number
  #        path: pr_number.txt
  #        retention-days: 1

  # Build libamrex and all tutorials with CUDA
  tutorials-cuda:
    name: MSVC C++17 w/ CUDA@12.4 w/o Fortran w/o MPI
    runs-on: windows-2022
    steps:
    - uses: actions/checkout@v4
    - name: Download CUDA
      run: |
        if (Test-Path "C:\Program Files\NVIDIA GPU Computing Toolkit\") { exit }
        New-item -ItemType directory -Name cuda
        Set-Location -Path cuda -PassThru
        Invoke-WebRequest -Uri 'https://developer.download.nvidia.com/compute/cuda/12.4.0/network_installers/cuda_12.4.0_windows_network.exe' -OutFile 'cuda_install.exe'
        Start-Process -FilePath '.\cuda_install.exe' -ArgumentList '-s nvcc cudart cublas cufft curand' -Wait -NoNewWindow
        Remove-Item cuda_install.exe
    - name: Build & Install
      shell: cmd
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise\vc\Auxiliary\build\vcvarsall.bat" x64
        SET "CUDA_PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.4"
        SET "CMAKE_PREFIX_PATH=%CUDA_PATH%;%CMAKE_PREFIX_PATH%"
        SET "PATH=%CUDA_PATH%\bin\;%PATH%"
        SET "PATH=%CUDA_PATH%\libnvvp\;%PATH%"
        cmake -S . -B build ^
              -DCUDAToolkit_ROOT="%CUDA_PATH%"  ^
              -DCMAKE_BUILD_TYPE=Release ^
              -DAMReX_CUDA_ARCH=8.0      ^
              -DAMReX_FORTRAN=OFF        ^
              -DAMReX_GPU_BACKEND=CUDA   ^
              -DAMReX_MPI=OFF            ^
              -DAMReX_PARTICLES=ON

        cmake --build build --config Release -j 4

        cmake --build build --config Release --target install

    # use "cmd", see https://gitlab.kitware.com/cmake/cmake/-/issues/20281
