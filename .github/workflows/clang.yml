# -Wno-c++17-extensions: Clang complains about nodiscard if the standard is not set to c++17.

name: LinuxClang

on: [push, pull_request]

concurrency:
  group: ${{ github.ref }}-${{ github.head_ref }}-linux-clang
  cancel-in-progress: true

jobs:
  # Build and install libamrex as AMReX CMake project
  # Note: this is an intentional "minimal" build that does not enable (many) options
  library_clang:
    name: Clang@7.0 C++17 SP NOMPI Debug [lib]
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - name: Dependencies
      run: |
        .github/workflows/dependencies/dependencies_clang.sh 7
        .github/workflows/dependencies/dependencies_clang-tidy.sh 12
        .github/workflows/dependencies/dependencies_ccache.sh
    - name: Set Up Cache
      uses: actions/cache@v3
      with:
        path: ~/.cache
        key: ccache-${{ github.workflow }}-${{ github.job }}-git-${{ github.sha }}
        restore-keys: |
             ccache-${{ github.workflow }}-${{ github.job }}-git-
    - name: Build & Install
      env: {CXXFLAGS: "-fno-operator-names -Werror -Wall -Wextra -Wpedantic -Wnull-dereference -Wfloat-conversion -Wshadow -Woverloaded-virtual -Wextra-semi -Wunreachable-code -Wnon-virtual-dtor"}
      run: |
        export CCACHE_COMPRESS=1
        export CCACHE_COMPRESSLEVEL=10
        export CCACHE_MAXSIZE=125M
        ccache -z

        mkdir build
        cd build
        cmake ..                        \
            -DCMAKE_BUILD_TYPE=Debug    \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DCMAKE_INSTALL_PREFIX=/tmp/my-amrex      \
            -DAMReX_EB=ON                             \
            -DAMReX_FORTRAN=ON                        \
            -DAMReX_MPI=OFF                           \
            -DAMReX_PARTICLES=ON                      \
            -DAMReX_PLOTFILE_TOOLS=ON                 \
            -DAMReX_PRECISION=SINGLE                  \
            -DAMReX_PARTICLES_PRECISION=SINGLE        \
            -DCMAKE_C_COMPILER=$(which clang-7)         \
            -DCMAKE_CXX_COMPILER=$(which clang++-7)     \
            -DCMAKE_Fortran_COMPILER=$(which gfortran)  \
            -DAMReX_CLANG_TIDY=ON                     \
            -DAMReX_CLANG_TIDY_WERROR=ON              \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        make -j 2
        make install
        make test_install

        export PATH=/tmp/my-amrex/bin:$PATH
        which fcompare

        ctest --output-on-failure

        ccache -s

  tests_clang:
    name: Clang@14.0 C++17 SP Particles DP Mesh Debug [tests]
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
    - name: Dependencies
      run: |
        .github/workflows/dependencies/dependencies_clang.sh 14
        .github/workflows/dependencies/dependencies_clang-tidy.sh 14
        .github/workflows/dependencies/dependencies_ccache.sh
    - name: Set Up Cache
      uses: actions/cache@v3
      with:
        path: ~/.cache
        key: ccache-${{ github.workflow }}-${{ github.job }}-git-${{ github.sha }}
        restore-keys: |
             ccache-${{ github.workflow }}-${{ github.job }}-git-
    - name: Build & Install
      env: {CXXFLAGS: "-fno-operator-names -Werror -Wall -Wextra -Wpedantic -Wnull-dereference -Wfloat-conversion -Wshadow -Woverloaded-virtual -Wextra-semi -Wunreachable-code -O1 -Wnon-virtual-dtor"}
        # It's too slow with -O0
      run: |
        export CCACHE_COMPRESS=1
        export CCACHE_COMPRESSLEVEL=10
        export CCACHE_MAXSIZE=125M
        ccache -z

        mkdir build
        cd build
        cmake ..                                      \
            -DCMAKE_BUILD_TYPE=Debug                  \
            -DCMAKE_VERBOSE_MAKEFILE=ON               \
            -DAMReX_EB=ON                             \
            -DAMReX_ENABLE_TESTS=ON                   \
            -DAMReX_FORTRAN=ON                        \
            -DAMReX_MPI=OFF                           \
            -DAMReX_PARTICLES=ON                      \
            -DAMReX_PRECISION=DOUBLE                  \
            -DAMReX_PARTICLES_PRECISION=SINGLE        \
            -DCMAKE_C_COMPILER=$(which clang-14)      \
            -DCMAKE_CXX_COMPILER=$(which clang++-14)  \
            -DCMAKE_Fortran_COMPILER=$(which gfortran)  \
            -DAMReX_CLANG_TIDY=ON                     \
            -DAMReX_CLANG_TIDY_WERROR=ON              \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        make -j 2

        ctest --output-on-failure -E GhostsAndVirtuals

        ccache -s

  # Build 2D libamrex with configure
  configure-2d:
    name: Clang NOMPI Release [configure 2D]
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
    - name: Dependencies
      run: |
        .github/workflows/dependencies/dependencies_clang.sh 14
        .github/workflows/dependencies/dependencies_clang-tidy.sh 14
        .github/workflows/dependencies/dependencies_ccache.sh
    - name: Set Up Cache
      uses: actions/cache@v3
      with:
        path: ~/.cache
        key: ccache-${{ github.workflow }}-${{ github.job }}-git-${{ github.sha }}
        restore-keys: |
             ccache-${{ github.workflow }}-${{ github.job }}-git-
    - name: Build & Install
      run: |
        export CCACHE_COMPRESS=1
        export CCACHE_COMPRESSLEVEL=10
        export CCACHE_MAXSIZE=125M
        ccache -z

        ./configure --dim 2 --with-fortran no --comp llvm --with-mpi no
        make -j2 WARN_ALL=TRUE WARN_ERROR=TRUE XTRA_CXXFLAGS="-fno-operator-names" \
            USE_CLANG_TIDY=TRUE CLANG_TIDY=clang-tidy-14 CLANG_TIDY_WARN_ERROR=TRUE \
            CCACHE=ccache
        make install

        ccache -s

  cache_eviction:
    name: Cache Eviction for ${{ github.workflow }}
    if: ${{ always() }}
    needs: [library_clang, tests_clang, configure-2d]
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Clean up cache
        run: |
          gh extension install actions/gh-actions-cache

          WORKFLOW=${{ github.workflow }}
          REPO=${{ github.repository }}
          BRANCH=${{ github.ref }}

          ## Setting this to not fail the workflow while deleting cache keys.
          set +e

          MYJOBS="library_clang tests_clang configure-2d"
          for myjob in $MYJOBS
          do
            key_prefix="ccache-${WORKFLOW}-${myjob}-git-"
            old_keys=$(gh actions-cache list -R $REPO -B $BRANCH --key $key_prefix --sort last-used | cut -f 1 | tail -n +2)
            ## tail -n +2 keeps the last used key

            for key in $old_keys
            do
                echo "actions-cache delete $key -R $REPO -B $BRANCH --confirm"
                gh actions-cache delete $key -R $REPO -B $BRANCH --confirm
            done
          done
          echo "Done"
