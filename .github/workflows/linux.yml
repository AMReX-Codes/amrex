name: linux

on: [push, pull_request]

jobs:
  # Build and install libamrex as AMReX CMake project
  library:
    name: GNU@7.5 C++17 Release [lib]
    runs-on: ubuntu-latest
    env: {CXXFLAGS: "-Werror -Wshadow -Woverloaded-virtual -Wunreachable-code -fno-operator-names"}
    steps:
    - uses: actions/checkout@v2
    - name: Dependencies
      run: .github/workflows/dependencies/dependencies.sh
    - name: Build & Install
      run: |
        mkdir build
        cd build
        cmake ..                                  \
            -DCMAKE_VERBOSE_MAKEFILE=ON           \
            -DCMAKE_INSTALL_PREFIX=/tmp/my-amrex  \
            -DCMAKE_CXX_STANDARD=17
        make -j 2
        make install

  library_clang:
    name: Clang@6.0 C++14 SP NOMPI Debug [lib]
    runs-on: ubuntu-latest
    env: {CXXFLAGS: "-Werror -Wshadow -Woverloaded-virtual -Wextra-semi -Wunreachable-code -fno-operator-names"}
    steps:
    - uses: actions/checkout@v2
    - name: Dependencies
      run: .github/workflows/dependencies/dependencies_clang6.sh
    - name: Build & Install
      run: |
        mkdir build
        cd build
        cmake ..                        \
            -DCMAKE_BUILD_TYPE=Debug    \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DCMAKE_INSTALL_PREFIX=/tmp/my-amrex      \
            -DAMReX_MPI=OFF                           \
            -DAMReX_PARTICLES=ON                      \
            -DAMReX_PRECISION=SINGLE                  \
            -DAMReX_PARTICLES_PRECISION=SINGLE        \
            -DCMAKE_CXX_STANDARD=14                   \
            -DCMAKE_C_COMPILER=$(which clang)         \
            -DCMAKE_CXX_COMPILER=$(which clang++)     \
            -DCMAKE_Fortran_COMPILER=$(which gfortran)
        make -j 2
        make install

  # Build libamrex and all tutorials
  tutorials:
    name: GNU@7.5 C++14 [tutorials]
    runs-on: ubuntu-latest
    env: {CXXFLAGS: "-Werror -Wshadow -Woverloaded-virtual -Wunreachable-code -fno-operator-names"}
    steps:
    - uses: actions/checkout@v2
    - name: Dependencies
      run: .github/workflows/dependencies/dependencies.sh
    - name: Build & Install
      run: |
        mkdir build
        cd build
        cmake ..                        \
            -DCMAKE_BUILD_TYPE=Debug    \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DAMReX_BUILD_TUTORIALS=ON  \
            -DAMReX_PARTICLES=ON
        make -j 2

  # Build libamrex and all tutorials
  tutorials_cxx20:
    name: GNU@10.1 C++20 OMP [tutorials]
    runs-on: ubuntu-latest
    env: {CXXFLAGS: "-Werror -Wno-error=deprecated-declarations -Wshadow -Woverloaded-virtual -Wunreachable-code -fno-operator-names"}
    steps:
    - uses: actions/checkout@v2
    - name: Dependencies
      run: .github/workflows/dependencies/dependencies_gcc10.sh
    - name: Build & Install
      run: |
        mkdir build
        cd build
        cmake ..                        \
            -DCMAKE_BUILD_TYPE=Debug    \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DAMReX_BUILD_TUTORIALS=ON  \
            -DAMReX_OMP=ON              \
            -DAMReX_PARTICLES=ON        \
            -DCMAKE_CXX_STANDARD=20     \
            -DCMAKE_C_COMPILER=$(which gcc-10)              \
            -DCMAKE_CXX_COMPILER=$(which g++-10)            \
            -DCMAKE_Fortran_COMPILER=$(which gfortran-10)
        make -j 2

  # Build libamrex and all tutorials w/o MPI
  tutorials-nonmpi:
    name: GNU@7.5 C++14 NOMPI [tutorials]
    runs-on: ubuntu-latest
    env: {CXXFLAGS: "-Werror -Wshadow -Woverloaded-virtual -Wunreachable-code -fno-operator-names"}
    steps:
    - uses: actions/checkout@v2
    - name: Dependencies
      run: .github/workflows/dependencies/dependencies.sh
    - name: Build & Install
      run: |
        mkdir build
        cd build
        cmake ..                        \
            -DCMAKE_BUILD_TYPE=Debug    \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DAMReX_BUILD_TUTORIALS=ON  \
            -DAMReX_MPI=OFF             \
            -DAMReX_PARTICLES=ON
        make -j 2

  # Build libamrex and all tutorials
  tutorials-nofortran:
    name: GNU@7.5 C++11 w/o Fortran [tutorials]
    runs-on: ubuntu-latest
    env: {CXXFLAGS: "-Werror -Wshadow -Woverloaded-virtual -Wunreachable-code -fno-operator-names"}
    steps:
    - uses: actions/checkout@v2
    - name: Dependencies
      run: .github/workflows/dependencies/dependencies_nofortran.sh
    - name: Build & Install
      run: |
        mkdir build
        cd build
        cmake ..                        \
            -DCMAKE_BUILD_TYPE=Debug    \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DAMReX_BUILD_TUTORIALS=ON  \
            -DAMReX_PARTICLES=ON       \
            -DAMReX_FORTRAN=OFF        \
            -DCMAKE_CXX_STANDARD=11
        make -j 2

  # Build libamrex and all tutorials with CUDA
  tutorials-cuda:
    name: CUDA@9.1.85 GNU@4.8.5 C++11 Release [tutorials]
    runs-on: ubuntu-latest
    env: {CXXFLAGS: "-fno-operator-names"}
    steps:
    - uses: actions/checkout@v2
    - name: Dependencies
      run: .github/workflows/dependencies/dependencies_nvcc.sh
    - name: Build & Install
      run: |
        mkdir build
        cd build
        cmake ..                                         \
            -DCMAKE_VERBOSE_MAKEFILE=ON                  \
            -DAMReX_BUILD_TUTORIALS=ON                   \
            -DAMReX_PARTICLES=ON                        \
            -DAMReX_GPU_BACKEND=CUDA                         \
            -DCMAKE_C_COMPILER=$(which gcc-4.8)              \
            -DCMAKE_CXX_COMPILER=$(which g++-4.8)            \
            -DCMAKE_CUDA_HOST_COMPILER=$(which g++-4.8)      \
            -DCMAKE_Fortran_COMPILER=$(which gfortran-4.8)   \
            -DAMReX_CUDA_ARCH=6.0
        make -j 2

# disabled since Intel patched a new CMake Compiler ID in with incomplete support
# for dpcpp
  tutorials-dpcpp:
    if: false
    name: DPCPP@PubBeta GFortran@7.5 C++17 [tutorials]
    runs-on: ubuntu-latest
    env: {CXXFLAGS: "-fno-operator-names"}
    steps:
    - uses: actions/checkout@v2
    - name: Dependencies
      run: .github/workflows/dependencies/dependencies_dpcpp.sh
    - name: Build & Install
      run: |
        set +e
        source /opt/intel/oneapi/setvars.sh
        set -e
        cmake -S . -B build                                \
            -DCMAKE_VERBOSE_MAKEFILE=ON                    \
            -DAMReX_BUILD_TUTORIALS=ON                     \
            -DAMReX_PARTICLES=ON                           \
            -DAMReX_GPU_BACKEND=SYCL                       \
            -DCMAKE_C_COMPILER=$(which clang)              \
            -DCMAKE_CXX_COMPILER=$(which dpcpp)            \
            -DCMAKE_Fortran_COMPILER=$(which gfortran)
        cmake --build build --parallel 2

  tutorials-hip:
    name: HIP ROCm@3.8 GFortran@9.3 C++17 [tutorials]
    runs-on: ubuntu-20.04
    env: {CXXFLAGS: "-fno-operator-names"}
    steps:
    - uses: actions/checkout@v2
    - name: Dependencies
      run: .github/workflows/dependencies/dependencies_hip.sh
    - name: Build & Install
      run: |
        source /etc/profile.d/rocm.sh
        hipcc --version
        mkdir build
        cd build
        cmake ..                                           \
            -DCMAKE_VERBOSE_MAKEFILE=ON                    \
            -DAMReX_BUILD_TUTORIALS=ON                     \
            -DAMReX_PARTICLES=ON                          \
            -DAMReX_FORTRAN=ON                            \
            -DAMReX_LINEAR_SOLVERS=ON                     \
            -DAMReX_GPU_BACKEND=HIP                       \
            -DAMReX_AMD_ARCH=gfx900                              \
            -DCMAKE_C_COMPILER=$(which hipcc)              \
            -DCMAKE_CXX_COMPILER=$(which hipcc)            \
            -DCMAKE_Fortran_COMPILER=$(which gfortran)
        make -j 2

  # Build 1D libamrex with configure
  configure-1d:
    name: GNU@7.5 Release [configure 1D]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Dependencies
      run: .github/workflows/dependencies/dependencies.sh
    - name: Build & Install
      run: |
        ./configure --dim 1
        make -j2 XTRA_CXXFLAGS=-fno-operator-names
        make install

  # Build 2D libamrex with configure
  configure-2d:
    name: Clang@6.0 NOMPI Release [configure 2D]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Dependencies
      run: .github/workflows/dependencies/dependencies_clang6.sh
    - name: Build & Install
      run: |
        ./configure --dim 2 --with-fortran no --comp llvm --with-mpi no
        make -j2 WARN_ALL=TRUE WARN_ERROR=TRUE XTRA_CXXFLAGS=-fno-operator-names
        make install

  # Build 3D libamrex with configure
  configure-3d:
    name: GNU@7.5 Release [configure 3D]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Dependencies
      run: .github/workflows/dependencies/dependencies.sh
    - name: Build & Install
      run: |
        ./configure --dim 3 --enable-eb yes --enable-xsdk-defaults yes
        make -j2 WARN_ALL=TRUE WARN_ERROR=TRUE XTRA_CXXFLAGS=-fno-operator-names
        make install

  # Build 3D libamrex debug omp build with configure
  configure-3d-omp-debug:
    name: GNU@7.5 OMP Debug [configure 3D]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Dependencies
      run: .github/workflows/dependencies/dependencies.sh
    - name: Build & Install
      run: |
        ./configure --dim 3 --enable-eb yes --enable-xsdk-defaults yes --with-omp yes --debug yes
        make -j2 WARN_ALL=TRUE WARN_ERROR=TRUE XTRA_CXXFLAGS=-fno-operator-names
        make install

  # Build Tools/Plotfile
  plotfile-tools:
    name: GNU Plotfile Tools [tools]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Dependencies
      run: .github/workflows/dependencies/dependencies.sh
    - name: Build & Install
      run: |
        cd Tools/Plotfile
        make -j2 USE_MPI=FALSE USE_OMP=FALSE WARN_ALL=TRUE WARN_ERROR=TRUE XTRA_CXXFLAGS=-fno-operator-names

  # Build libamrex and run all tests
  tests:
    name: GNU@7.5 C++14 [tests]
    runs-on: ubuntu-latest
    env: {CXXFLAGS: "-Werror -Wshadow -Woverloaded-virtual -Wunreachable-code -fno-operator-names"}
    steps:
    - uses: actions/checkout@v2
    - name: Dependencies
      run: .github/workflows/dependencies/dependencies.sh
    - name: Build & Install
      run: |
        mkdir build
        cd build
        cmake ..                        \
            -DAMReX_OMP=ON             \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DAMReX_ENABLE_TESTS=ON     \
            -DAMReX_PARTICLES=ON
        make -j 2
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure -R
