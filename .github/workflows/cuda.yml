name: cuda

on: [push, pull_request]

concurrency:
  group: ${{ github.ref }}-${{ github.head_ref }}-cuda
  cancel-in-progress: true

jobs:
  # Build libamrex and all tests with CUDA 11.0.2 (recent supported)
  tests-cuda11:
    name: CUDA@11.2 GNU@9.3.0 C++17 Release [tests]
    runs-on: ubuntu-20.04
    env: {CXXFLAGS: "-fno-operator-names -Werror -Wall -Wextra -Wpedantic -Wnull-dereference -Wfloat-conversion -Wshadow -Woverloaded-virtual -Wextra-semi -Wunreachable-code -Wnon-virtual-dtor -Wlogical-op -Wmisleading-indentation -Wduplicated-cond -Wduplicated-branches"}
    steps:
    - uses: actions/checkout@v3
    - name: Dependencies
      run: .github/workflows/dependencies/dependencies_nvcc11.sh
    - name: Build & Install
      run: |
        export PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
        export LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/cuda/lib64:${LD_LIBRARY_PATH}
        which nvcc || echo "nvcc not in PATH!"

        cmake -S . -B build                              \
            -DCMAKE_VERBOSE_MAKEFILE=ON                  \
            -DAMReX_EB=ON                                \
            -DAMReX_ENABLE_TESTS=ON                      \
            -DAMReX_FORTRAN=OFF                          \
            -DAMReX_PARTICLES=ON                         \
            -DAMReX_GPU_BACKEND=CUDA                     \
            -DCMAKE_C_COMPILER=$(which gcc)              \
            -DCMAKE_CXX_COMPILER=$(which g++)            \
            -DCMAKE_CUDA_HOST_COMPILER=$(which g++)      \
            -DCMAKE_Fortran_COMPILER=$(which gfortran)   \
            -DAMReX_CUDA_ARCH=7.0                        \
            -DAMReX_CUDA_ERROR_CROSS_EXECUTION_SPACE_CALL=ON \
            -DAMReX_CUDA_ERROR_CAPTURE_THIS=ON

        cmake --build build -j 2

  # Build libamrex and all tests with NVHPC (recent supported)
  tests-nvhpc23-1-nvcc:
    name: NVHPC@23.1 NVCC/NVC++ C++17 Release [tests]
    runs-on: ubuntu-20.04
    env: {CXXFLAGS: "-Werror -Wall -Wextra -Wpedantic -Wshadow --diag_suppress=code_is_unreachable"}
    steps:
    - uses: actions/checkout@v3
    - name: Dependencies
      run: .github/workflows/dependencies/dependencies_nvhpc23-1.sh
    - name: Build & Install
      run: |
        source /etc/profile.d/modules.sh
        module load /opt/nvidia/hpc_sdk/modulefiles/nvhpc/23.1

        which nvcc || echo "nvcc not in PATH!"
        which nvc++ || echo "nvc++ not in PATH!"
        which nvc || echo "nvc not in PATH!"
        which nvfortran || echo "nvfortran not in PATH!"
        nvcc --version
        nvc++ --version
        nvc --version
        nvfortran --version
        cmake --version

        cmake -S . -B build                              \
            -DCMAKE_VERBOSE_MAKEFILE=ON                  \
            -DAMReX_ENABLE_TESTS=ON                      \
            -DAMReX_PARTICLES=ON                         \
            -DAMReX_FORTRAN=OFF                          \
            -DAMReX_OMP=ON                               \
            -DCMAKE_C_COMPILER=$(which nvc)              \
            -DCMAKE_CXX_COMPILER=$(which nvc++)          \
            -DCMAKE_Fortran_COMPILER=$(which nvfortran)

        cmake --build build -j 2

  # Build 3D libamrex cuda build with configure
  configure-3d-cuda:
    name: CUDA@11.2 GNU@9.3.0 [configure 3D]
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - name: Dependencies
      run: .github/workflows/dependencies/dependencies_nvcc11.sh
    - name: Build & Install
      run: |
        export PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
        ./configure --dim 3 --with-cuda yes --enable-eb yes --enable-xsdk-defaults yes --with-fortran no
        #
        # /home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchGlobal.H:16:41: error: unused parameter ‘f0’ [-Werror=unused-parameter]
        #    16 |     AMREX_GPU_GLOBAL void launch_global (L f0) { f0(); }
        #
        make -j2 WARN_ALL=TRUE WARN_ERROR=TRUE XTRA_CXXFLAGS="-fno-operator-names -Wno-unused-parameter"
        make install
