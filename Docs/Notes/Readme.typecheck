
A lot of works in AMReX are done in Fortran kernels called from C++.
These Fortran routines are extern "C" functions to C++.
Unfortunately, there is no type safety check at compile time.  For
example, 

    /* function declaration seen by C++ */
    extern "C" {
        void my_f (double* x);
    }

    /* Fortran procedure */
    subroutine my_f (x, y) bind(c)
      implicit none
      integer x, y
    end subroutine my_f

The code above will compile without errors even though the number of
arguments and types don't match.

To help detect this kind of issues, AMReX provides a type check tool.
Note that it only works when GCC is used.  In the directory an AMReX
based code is compiled, type

    make typecheck

Extra arguments used in a usual AMReX build (e.g., USE_MPI=TRUE DIM=2)
can be added.  When it finishes, the output may look like,

    Function my_f in main_F.H vs. Fortran procedure in f.f90
        number of arguments 1 does NOT match 2.
        arg #1: C type ['double', 'pointer'] does NOT match Fortran type ('INTEGER 4', 'pointer', 'x').
    22 functions checked, 1 error(s) found.  More details can be found in tmp_build_dir/t/3d.gnu.DEBUG.EXE/amrex_typecheck.ou.

It should be noted that Fortran by default passes argument by
reference.  In the example output above, `pointer` in `Fortran type
('INTEGER 4', 'pointer', 'x')` means it's a reference to argument
(i.e., C pointer), not a Fortran pointer.

There are some limitations.  For a function to be checked by the tool,
the declaration must be in a header file named `*_f.H` or `*_F.H`, and
the header file must be in the `*EXE_headers` make variable, where `*`
is `C`, `c`, `F`, `f`, `F90`, or `f90`.  The headers are preprocessed
first by cpp as C language, and is then parsed by pycparser
(https://pypi.python.org/pypi/pycparser) that needs to be installed on
your system.  Because pycparser is a C parser, C++ parts of the
headers (e.g., `extern "C" {`) need to be hidden with macro `#ifdef
__cplusplus`.  Headers like `AMReX_ArrayLim.H`, `AMReX_BLFort.H`,
`AMReX_SPACE.H`, and `AMReX_REAL.H` can be used as a C header, but
most other AMReX headers cannot and should be hidden by `#ifdef
__cplusplus` if they are included.  The function declaration might
also use C++ syntax.  For example,

    class MyIntType {
        int i[3];
    );

    extern "C" {
        void f (MyIntType&);
    }

Because `MyIntType` is a POD, it can be passed to Fortran as an
integer array.  But `pycparser` cannot parse this piece of code
because of the use of C++ class and reference `&`.  This can be
handled by macros.

  #ifdef __cplusplus  
    class MyIntType {
        int i[3];
    );

    extern "C" {
  #else
  #define MyIntType int 
  #endif
        void f (MyIntType&);
  #ifdef __cplusplus  
    }
  #endif

The preprocessor will produce the following code,

        void f (int&);

Then the make system will use `sed` to replace `&` with `*` resulting
in standard C function declaration before pycparser is used.  Also
note that the make system will also replace `amrex::Real` and
`amrex_real`.

A known issue is that the tool will fail if there are two or more
Fortran procedures with the same name as the function declared in a
C/C++ header even though only one is exposed to the global namespace.

Fortran standard offers interoperability for many C types.  AMReX
codes usually use only a small set of these.  Thus the type check tool
currently only supports char, short, int, long (which is assumed to be
size of 8 bytes), float, and double.  It supports these types passed
by reference and value.  It also supports `void *`, and the Fortran
side treats it a reference to any type or `type(c_ptr), value`.
Pointer to pointer (e.g., double **) is not supported (unless there is
such a feature request).  It should be noted that the type check tool
does not check 'const'ness.
