
--------------------------------------------- Region profiling.
Part of the trace profiling is the ability to set regions
in the code which can be analyzed for profiling information
independently from other regions.  Examples could include
"initialization," "i/o," "TimeStep3," "AdvanceHydro," etc.
The amrprofparser can query the performance database with
filters to include and exclude given regions.  To create
regions, add these to your code:

    BL_PROFILE_REGION_START("ThreeFuncRegion");  // starts the region
    func0();
    func1();  // your code
    func2();
    BL_PROFILE_REGION_STOP("ThreeFuncRegion");  // stops the region



--------------------------------------------- Communications timings.
Timings for communication functions such as ParallelDescriptor::Send(...)
are shown in the regular profiling's function timing section.  AMReX
can also collect additional information such as point to point
communication timings, amount of data moved, barrier and
reduction wait times, etc.  To use this part of the profiler,
set PROFILE=TRUE and COMM_PROFILE=TRUE in your GNUmakefile.
A database of communication information will be written to
nfiles in bl_prof and must be postprocessed with AMRProfParser.

Some features of the communication profiler:
  local filtering.
  nfiles for data and headers.
  demand driven i/o support.
  named tags.
  named barriers.
  flushing.

nametag instrumentation:

BL_COMM_PROFILE_NAMETAG("LevelAdvance::FillPatchIterator START");
BL_COMM_PROFILE_NAMETAG("LevelAdvance::FillPatchIterator END");

barriers can be named:  ParallelDescriptor::Barrier("CreateDirs");


--------------------------------------------- Demand driven i/o support.
Each header file contains seek position information for
data blocks, barriers, reductions, and named tags and
minmax times for each data block in order to assist
reading subsets of the data.


--------------------------------------------- File formats.
  The communication data exists in the directory named
  bl_prof.  Header files are named bl_comm_prof_H_0000
  through bl_comm_prof_H_nnnn, where nnnn is nfiles-1.
  data files have the same names except 'D' instead of 'H'.
  the data is in binary.  currently there is no support
  for postprocessing on a machine with a different byte
  ordering from where the data was written.

  header files have the following format:

NProcs  4
CommStatsSize  24
CommProfProc  0  nCommStats  2338513  datafile  bl_comm_prof_D_0000  seekpos  0
bNum  0  "Amr::setRecordGridInfo"  4
bNum  1  "Amr::checkPoint::dir"  1489916
bNum  n  "barrier name"  seekpos
bNum  m  "barrier name"  seekpos
nTag  "STEP 1"  2338512
nTag  "tagname aaa"  seekpos
nTag  "tagname bbb"  seekpos
red  0  2574
red  1  2576
red  n  seekpos
timeMinMax  0.002336025238037109  231.200443983078
nameTagNames  "STEP 1"
nameTagNames  "tagname aaa"
nameTagNames  "tagname bbb"
NProcs  4   # <------------------ a new data block
# rest of data block
# more data blocks


Each mpi process writes its own data and data can be
flushed during the run, so there will be multiple
blocks for each process, probably interleaved with
data from other processes.  The amrprofparser will
sort these out.




