# Maximum number of time steps
max_step = 100

# number of grid points
amr.n_cell =  512 512

amr.plot_int = 10   # How often to write plotfiles.
amr.plot_file = plt

# Maximum allowable size of each subdomain in the problem domain;
#    this is used to decompose the domain for parallel calculations.
amr.max_grid_size = 32

# Maximum level in hierarchy (for now must be 0, i.e., one level in total)
amr.max_level = 0

# Geometry
geometry.coord_sys   = 0                  # 0: Cartesian
geometry.is_periodic = 0 0 0     # Is periodic?
geometry.prob_lo     = -100.e-6   0.     # physical domain
geometry.prob_hi     =  100.e-6   100.e-6

# Verbosity
warpx.verbose = 1
warpx.use_filter = 1
warpx.serialize_ics = 1

# Algorithms
algo.current_deposition = 0
algo.charge_deposition = 0
algo.field_gathering = 0
algo.particle_pusher = 0
interpolation.nox = 3
interpolation.noy = 3
interpolation.noz = 3

# Constants
constants.use_my_constants = 1
constants.constant_names  = zc     zp           lgrad  nc     
constants.constant_values = 20.e-6 20.47931e-6  .08e06 1.74e27

# NUMERICS
warpx.cfl = 1.0
warpx.do_dynamic_scheduling = 1
warpx.load_balance_int = 10

particles.nspecies = 2
particles.species_names = electrons ions

electrons.charge = -q_e
electrons.mass = m_e
electrons.injection_style = NUniformPerCell
electrons.num_particles_per_cell_each_dim = 2 2
electrons.momentum_distribution_type = "gaussian"
electrons.zmin = 19.520e-6
electrons.zmax = 25.47931e-6
# CONSTANT PROFILE
# electrons.profile = constant
# electrons.density = 1.74e27
# CUSTOM PROFILE
electrons.profile                 = parse_density_function
electrons.density_function(x,y,z) = "(z<zp)*nc*exp(-(z-zc)/lgrad)+(z>zp)*400*nc"

ions.charge = -q_e
ions.mass = m_p
ions.injection_style = NUniformPerCell
ions.num_particles_per_cell_each_dim = 2 2
ions.momentum_distribution_type = "gaussian"
ions.zmin = 19.520e-6
ions.zmax = 25.47931e-6
# CONSTANT PROFILE
# ions.profile = constant
# ions.density = 1.74e27
# CUSTOM PROFILE
ions.profile                 = parse_density_function
ions.density_function(x,y,z) = "(z<zp)*nc*exp(-(z-zc)/lgrad)+(z>zp)*400*nc"

# Laser
warpx.use_laser      = 1
laser.position     = 0. 0. 5.e-6 # This point is on the laser plane
laser.direction    = 0. 0. 1.     # The plane normal direction
laser.polarization = 1. 0. 0.     # The main polarization vector
laser.e_max        = 4.e12        # Maximum amplitude of the laser field (in V/m)
laser.wavelength = 0.8e-6         # The wavelength of the laser (in meters)
laser.profile      = Gaussian
laser.profile_waist = 5.e-6      # The waist of the laser (in meters)
laser.profile_duration = 15.e-15  # The duration of the laser (in seconds)
laser.profile_t_peak = 25.e-15    # The time at which the laser reaches its peak (in seconds)
laser.profile_focal_distance = 15.e-6  # Focal distance from the antenna (in meters)

# laser.profile               = parse_field_function
# laser.field_function(X,Y,t) = "(X>0)(X<10.e-6)*"

