AMREX_HOME ?= /path/to/amrex
SUNDIALS_ROOT ?= /path/to/CVODE

TOP := $(SUNDIALS_ROOT)

EBASE ?= main

# EXTERN_CORE is a list of directories to search for runtime parameters
EXTERN_CORE ?=


include $(AMREX_HOME)/Tools/GNUMake/Make.defs

all: $(executable)
	@echo SUCCESS


# Use a coarse grained OMP approach
DEFINES += -DCRSEGRNDOMP


#------------------------------------------------------------------------------
# CVODE directories
#------------------------------------------------------------------------------

ifeq ($(USE_CUDA_CVODE), TRUE)
  DEFINES += -DCUDA_CVODE
  ifeq ($(USE_CVODE_CUSOLVER), TRUE)
    DEFINES += -DCVODE_CUSOLVER
  endif
endif

INCLUDE_LOCATIONS += $(SUNDIALS_ROOT)/include

LIBRARY_LOCATIONS += $(SUNDIALS_ROOT)/lib
LIBRARIES += -lsundials_cvode -lsundials_sunlinsolband -lsundials_sunlinsolspbcgs -lsundials_sunlinsolsptfqmr -lsundials_sunmatrixsparse -lsundials_nveccuda -lsundials_sunlinsoldense -lsundials_sunlinsolspfgmr -lsundials_sunmatrixband -lsundials_sunnonlinsolfixedpoint -lsundials_nvecserial -lsundials_sunlinsolpcg -lsundials_sunlinsolspgmr -lsundials_sunmatrixdense -lsundials_sunnonlinsolnewton

ifeq ($(COMP), PGI)
  LIBRARIES += -rpath=$(SUNDIALS_ROOT)/lib
endif
ifeq ($(COMP), GNU)
  LIBRARIES += -Wl,-rpath=$(SUNDIALS_ROOT)/lib
endif

ifeq ($(USE_CUDA_CVODE), TRUE)
ifeq ($(USE_CVODE_CUSOLVER), TRUE)
  LIBRARIES += -lsundials_cusolver_sparse -lcusolver -lcusparse -lcublas
  LIBRARIES += -rpath=$(CUDA_HOME)/lib64
endif
endif

ifeq ($(USE_CPP_RHS), TRUE)
  DEFINES += -DCPP_RHS
endif

#------------------------------------------------------------------------------
# AMReX
#------------------------------------------------------------------------------

# core AMReX directories -- note the Make.package for these adds these
# directories into VPATH_LOCATIONS and INCLUDE_LOCATIONS for us, so we
# don't need to do it here

ifeq ($(USE_AMR_CORE), TRUE)
  Pdirs	:= Base AmrCore Amr Boundary
else
  Pdirs := Base
endif

Bpack	+= $(foreach dir, $(Pdirs), $(AMREX_HOME)/Src/$(dir)/Make.package)


#------------------------------------------------------------------------------
# EXTERN_CORE directories
#------------------------------------------------------------------------------

Bpack += $(foreach dir, $(EXTERN_CORE), $(dir)/Make.package)
Blocs += $(foreach dir, $(EXTERN_CORE), $(dir))


#------------------------------------------------------------------------------
# include all of the necessary directories
#------------------------------------------------------------------------------

include $(Bpack)

# this is a safety from the mega-fortran attempts
f90EXE_sources += $(ca_f90EXE_sources)
F90EXE_sources += $(ca_F90EXE_sources)

INCLUDE_LOCATIONS += $(Blocs)
VPATH_LOCATIONS   += $(Blocs)


#------------------------------------------------------------------------------
# runtime parameters
#------------------------------------------------------------------------------

# runtime parameter support for extern/ routines
F90EXE_sources += extern.F90

EXTERN_TEMPLATE := extern_probin.template

# these are for finding runtime parameters
EXTERN_SEARCH += $(EXTERN_CORE)

EXTERN_PARAMETERS := $(shell $(AMREX_HOME)/Tools/F_scripts/findparams.py $(EXTERN_SEARCH))

MANAGED_PROBIN_FLAG :=
ifdef USE_CUDA
  ifeq ($(USE_CUDA), TRUE)
    MANAGED_PROBIN_FLAG := --managed
  endif
endif

extern.F90: $(EXTERN_PARAMETERS) $(EXTERN_TEMPLATE)
	$(AMREX_HOME)/Tools/F_scripts/write_probin.py \
           -t $(EXTERN_TEMPLATE) -o extern.F90 -n extern \
           --pa "$(EXTERN_PARAMETERS)" $(MANAGED_PROBIN_FLAG)

#------------------------------------------------------------------------------
# build info
#------------------------------------------------------------------------------

# job_info support
CEXE_headers += $(AMREX_HOME)/Tools/C_scripts/AMReX_buildInfo.H
INCLUDE_LOCATIONS +=  $(AMREX_HOME)/Tools/C_scripts


MNAMES := 

# we make AMReX_buildInfo.cpp as we make the .o file, so we can delete
# it immediately.  this way if the build is interrupted, we are
# guaranteed to remake it

objForExecs += $(objEXETempDir)/AMReX_buildInfo.o

.FORCE:
.PHONE: .FORCE

# set BUILD_GIT_NAME and BUILD_GIT_DIR if you are building in a
# git-controlled dir not under Castro/
EXTRA_BUILD_INFO :=
ifdef BUILD_GIT_NAME
   EXTRA_BUILD_INFO := --build_git_name "$(BUILD_GIT_NAME)" \
                       --build_git_dir "$(BUILD_GIT_DIR)"
endif

$(objEXETempDir)/AMReX_buildInfo.o: .FORCE
	$(AMREX_HOME)/Tools/C_scripts/makebuildinfo_C.py \
          --amrex_home "$(AMREX_HOME)" \
          --COMP "$(COMP)" --COMP_VERSION "$(COMP_VERSION)" \
          --CXX_comp_name "$(CXX)" --CXX_flags "$(CXXFLAGS) $(CPPFLAGS) $(includes)" \
          --F_comp_name "$(F90)" --F_flags "$(F90FLAGS)" \
          --link_flags "$(LDFLAGS)" --libraries "$(libraries)" \
          --MODULES "$(MNAMES)" $(EXTRA_BUILD_INFO) \
          --GIT "$(TOP) $(AMREX_HOME)"
	$(SILENT) $(CCACHE) $(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $(CXXEXEFLAGS) AMReX_buildInfo.cpp -o $(objEXETempDir)/AMReX_buildInfo.o
	$(SILENT) $(RM) AMReX_buildInfo.cpp


#------------------------------------------------------------------------------
# finish up
#------------------------------------------------------------------------------

include $(AMREX_HOME)/Tools/GNUMake/Make.rules

clean::
	$(SILENT) $(RM) extern.F90

# Older versions of CASTRO generated a "network.f90" file when using
# the general_null network, which conflicts with our generalized
# network.f90 file.  So we should delete the local copy if we are
# trying to rebuild from an old directory.
# The same is true for "extern.f90".

clean::
	$(RM) extern.f90


# for debugging.  To see the value of a Makefile variable,
# e.g. Fmlocs, simply do "make print-Fmlocs".  This will print out the
# value.

print-%::
	@echo "$* is $($*)"
	@$(RM) AMReX_buildInfo.cpp
